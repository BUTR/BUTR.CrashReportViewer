using Microsoft.CodeAnalysis;
using Microsoft.CodeAnalysis.Text;

using System.Diagnostics.CodeAnalysis;
using System.Text;

namespace BUTR.Site.NexusMods.DependencyInjection;

[Generator]
[ExcludeFromCodeCoverage]
public class SourceGenerator : ISourceGenerator
{
    public void Initialize(GeneratorInitializationContext context)
    {
    }

    public void Execute(GeneratorExecutionContext context)
    {
        var stringBuilder = new StringBuilder("""
                                              using System;
                                              using System.Diagnostics.CodeAnalysis;
                                              using System.Threading.Tasks;
                                              using Microsoft.Extensions.DependencyInjection;

                                              """);


        stringBuilder.Append("""

                             namespace BUTR.Site.NexusMods.Server;

                             """);
        stringBuilder.Append("""

                             [ExcludeFromCodeCoverage]
                             partial class Startup
                             {
                                 partial void ConfigureServicesPartial(IServiceCollection services)
                                 {
                             """);


        foreach (var typeSymbol in GetTypesWithIToRegisterAttributes(context.Compilation))
        {
            var attributeData = GetAttributeData(typeSymbol);
            if (attributeData?.AttributeClass is null) continue;
            
            var interfaceSymbols = attributeData.AttributeClass.TypeArguments;

            foreach (var interfaceSymbol in interfaceSymbols)
            {
                stringBuilder.Append($"""
                                      
                                              services.{GetMethodName(attributeData.AttributeClass)}<{interfaceSymbol.ToDisplayString(SymbolDisplayFormat.FullyQualifiedFormat)}, {typeSymbol.ToDisplayString(SymbolDisplayFormat.FullyQualifiedFormat)}>();
                                      """);
            }
            if (interfaceSymbols.Length == 0)
            {
                stringBuilder.Append($"""
                                      
                                              services.{GetMethodName(attributeData.AttributeClass)}<{typeSymbol.ToDisplayString(SymbolDisplayFormat.FullyQualifiedFormat)}>();
                                      """);
            }
        }
        
        stringBuilder.Append("""

                                }
                             }
                             """);

        context.AddSource("AutoGeneratedServicesRegistration", SourceText.From(stringBuilder.ToString(), Encoding.UTF8));
    }

    private IEnumerable<INamedTypeSymbol> GetTypesWithIToRegisterAttributes(Compilation compilation)
    {
        var allTypes = GetAllTypes(compilation.GlobalNamespace);
        var types = allTypes.Where(x => 
            x is { TypeKind: TypeKind.Class, IsAbstract: false } &&
            x.GetAttributes().Any(a => a.AttributeClass?.Interfaces.Any(i => i.Name.Equals("IToRegister", StringComparison.OrdinalIgnoreCase)) == true)).ToList();
        return types;
    }

    private IEnumerable<INamedTypeSymbol> GetAllTypes(INamespaceSymbol @namespace)
    {
        foreach (var type in @namespace.GetTypeMembers())
        foreach (var nestedType in GetNestedTypes(type))
            yield return nestedType;

        foreach (var nestedNamespace in @namespace.GetNamespaceMembers())
        foreach (var type in GetAllTypes(nestedNamespace))
            yield return type;
    }

    private IEnumerable<INamedTypeSymbol> GetNestedTypes(INamedTypeSymbol type)
    {
        yield return type;
        
        foreach (var nestedType in type.GetTypeMembers().SelectMany(GetNestedTypes))
            yield return nestedType;
    }
    
    private static string GetMethodName(INamedTypeSymbol attributeClass)
    {
        return attributeClass.Name switch
        {
            var x when x.StartsWith("TransientService") => "AddTransient",
            var x when x.StartsWith("ScopedService") => "AddScoped",
            var x when x.StartsWith("SingletonService") => "AddSingleton",
            var x when x.StartsWith("HostedService") => "AddHostedService",
            _ => throw new InvalidOperationException()
        };
    }
    
    private static AttributeData? GetAttributeData(INamedTypeSymbol typeSymbol)
    {
        static IEnumerable<INamedTypeSymbol> GetAllInterfaces(INamedTypeSymbol? namedTypeSymbol)
        {
            var typeSymbol = namedTypeSymbol;
            while (typeSymbol is not null)
            {
                var interfaces = typeSymbol.Interfaces;
                foreach (var @interface in interfaces)
                    yield return @interface;
                typeSymbol = typeSymbol.BaseType;
            }
        }
        
        return typeSymbol.GetAttributes().Where(a =>
        {
            return GetAllInterfaces(a.AttributeClass).Any(i => i.Name.Equals("IToRegister", StringComparison.OrdinalIgnoreCase));
        }).FirstOrDefault();
    }
}