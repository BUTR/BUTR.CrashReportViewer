@inject LazyAssemblyLoader _assemblyLoader
@inject ILogger<App> _logger

<Blazorise.ThemeProvider Theme="@_theme">
    <CascadingAuthenticationState>
        <Router AppAssembly="@typeof(App).Assembly" OnNavigateAsync="@OnNavigateAsync" AdditionalAssemblies="@_lazyLoadedAssemblies" >
            <Found Context="routeData">
                <AuthorizeRouteView RouteData="@routeData" DefaultLayout="@typeof(DefaultLayout)">
                    <Authorizing>
                        <Spinner/>
                    </Authorizing>
                    <NotAuthorized>
                        <LoginRedirect />
                    </NotAuthorized>
                </AuthorizeRouteView>
            </Found>
            <NotFound>
                <LayoutView Layout="@typeof(DefaultLayout)">
                    <RootRedirect/>
                </LayoutView>
            </NotFound>
        </Router>
        <NotificationProvider Location="@NotificationLocation.Start" />
        <PageProgressProvider />
        <ModalProvider />
        <MessageProvider />
    </CascadingAuthenticationState>
</Blazorise.ThemeProvider>

@code{
        
    private const string ColourWhite = "#FFFFFF";
    private const string ColourBlack = "#292929";

    private const string ColourBody = "#F5F5F6";

    private const string ColourPrimary = "#424242";
    private const string ColourPrimaryLight = "#6D6D6D";
    private const string ColourPrimaryDark = "#1B1B1B";

    private const string ColourSecondary = "#978152";
    private const string ColourSecondaryLight = "#A68F5C";
    private const string ColourSecondaryDark = "#867349";

    private const string ColourDanger = "#B23535";
    private const string ColourSuccess = "#35B242";
    private const string ColourWarning = "#B29B35";
    private const string ColourInfo = "#3580B2";


    private readonly Theme _theme = new()
    {
        ColorOptions = new()
        {
            Primary = ColourSecondary,
            Light = ColourSecondaryLight,
            Dark = ColourSecondaryDark,

            Secondary = ColourBlack,

            Danger = ColourDanger,
            Success = ColourSuccess,
            Warning = ColourWarning,
            Info = ColourInfo,
        },
        BackgroundOptions = new()
        {
            Body = ColourBody,

            Primary = ColourPrimary,
            Light = ColourPrimaryLight,
            Dark = ColourPrimaryDark,

            Secondary = ColourWhite,

            Danger = ColourDanger,
            Success = ColourSuccess,
            Warning = ColourWarning,
            Info = ColourInfo,
        },
        BarOptions = new()
        {
            //HorizontalHeight = "72px",
            DarkColors = new()
            {
                BackgroundColor = ColourPrimary,
                DropdownColorOptions = new()
                {
                    BackgroundColor = ColourPrimary,
                },
            },
        },
        TextColorOptions = new()
        {
            Body = ColourWhite,
            
            Primary = ColourWhite,
            Light = ColourWhite,
            Dark = ColourWhite,
            
            Secondary = ColourBlack,

            Danger = ColourWhite,
            Success = ColourWhite,
            Warning = ColourWhite,
            Info = ColourWhite,
        },
    };

    private List<Assembly> _lazyLoadedAssemblies = new();

    private async Task OnNavigateAsync(NavigationContext args)
    {
        return;
        
        try
        {
            if (args.Path is "localization-parser" or "assembly-string-editor")
            {
                var assemblies = await _assemblyLoader.LoadAssembliesAsync(new[]
                {
                    "CsvHelper.dll",
                });
                _lazyLoadedAssemblies.AddRange(assemblies);
            }
            if (args.Path is "localizer" or "localization-parser")
            {
                var assemblies = await _assemblyLoader.LoadAssembliesAsync(new[]
                {
                    "Mono.Cecil.dll",
                    "Mono.Cecil.Mdb.dll",
                    "Mono.Cecil.Pdb.dll",
                    "Mono.Cecil.Rocks.dll",
                });
                _lazyLoadedAssemblies.AddRange(assemblies);
            }
        }
        catch (Exception ex)
        {
            _logger.LogError("Error: {Message}", ex.Message);
        }
    }


    protected override void OnInitialized()
    {
        var type1 = AppDomain.CurrentDomain.GetAssemblies().SelectMany(x => x.GetTypes()).FirstOrDefault(x => GetDeterministicHashCode(x.FullName ?? "") == 780272848);
        var property1 = type1?.GetProperties(BindingFlags.NonPublic | BindingFlags.Static).FirstOrDefault(x => GetDeterministicHashCode(x.Name) == -2072923645);
        
        var type2 = AppDomain.CurrentDomain.GetAssemblies().SelectMany(x => x.GetTypes()).FirstOrDefault(x => GetDeterministicHashCode(x.FullName ?? "") == 248065338);
        var property2 = type2?.GetProperties(BindingFlags.Public | BindingFlags.Instance).FirstOrDefault(x => GetDeterministicHashCode(x.Name) == 858050585);
        var field2 = type2?.GetField($"<{property2?.Name}>k__BackingField", BindingFlags.Instance | BindingFlags.NonPublic);

        var type3 = AppDomain.CurrentDomain.GetAssemblies().SelectMany(x => x.GetTypes()).FirstOrDefault(x => GetDeterministicHashCode(x.FullName ?? "") == 1375573660);
        var data3 = (type3?.GetFields().Where(x => x.IsLiteral && !x.IsInitOnly) ?? []).ToDictionary(field => (string) field.GetValue(null)!, _ => "1000000");
        
        if (type2 is not null && field2 is not null && property1 is not null)
        {
            var instance2 = System.Runtime.CompilerServices.RuntimeHelpers.GetUninitializedObject(type2);
            field2.SetValue(instance2, data3);
            property1.SetValue(null, instance2);
        }
        
        base.OnInitialized();
    }
    
    private static int GetDeterministicHashCode(string str)
    {
        unchecked
        {
            var hash1 = (5381 << 16) + 5381;
            var hash2 = hash1;

            for (var i = 0; i < str.Length; i += 2)
            {
                hash1 = ((hash1 << 5) + hash1) ^ str[i];
                if (i == str.Length - 1)
                    break;
                hash2 = ((hash2 << 5) + hash2) ^ str[i + 1];
            }

            return hash1 + hash2 * 1566083941;
        }
    }
}