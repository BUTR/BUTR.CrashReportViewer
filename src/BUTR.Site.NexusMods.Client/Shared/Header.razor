@implements IAsyncDisposable

@inject AuthenticationStateProvider _authenticationStateProvider
@inject IProfileProvider _profileProvider

<Bar Mode="BarMode.Horizontal"
     Breakpoint="Breakpoint.Desktop"
     Background="Background.Dark"
     ThemeContrast="ThemeContrast.Dark">
    <BarBrand Margin="Margin.Is0.FromEnd">
        <BarItem TextAlignment="TextAlignment.Center">
            <BarLink To="" Padding="Padding.Is0.OnY">
                <Figure Margin="Margin.Is0" Size="FigureSize.Is48x48">
                    <FigureImage Margin="Margin.Is0" Source="favicon.svg" AlternateText="BUTR Logo" />
                </Figure>
            </BarLink>
        </BarItem>
    </BarBrand>
    <BarToggler />
    <BarMenu>
        <BarStart>
            <AuthorizeView>
                <Authorized>
                    <BarItem>
                        <BarLink To="linked-mods">Linked Mods</BarLink>
                    </BarItem>

                    <BarItem>
                        <BarLink To="crash-reports-viewer">Crash Reports</BarLink>
                    </BarItem>
                </Authorized>
            </AuthorizeView>
        </BarStart>

        <BarEnd>
            <AuthorizeView Context="context2" Roles="@($"{ApplicationRoles.Moderator}")">
                <Authorized>
                    <BarItem>
                        <BarDropdown RightAligned>
                            <BarDropdownToggle>Moderation</BarDropdownToggle>
                            <BarDropdownMenu Background="Background.Dark">
                                <BarDropdownItem Background="Background.Dark">
                                    <BarLink To="manual-mod-link">Manual Mod Link</BarLink>
                                </BarDropdownItem>
                                <BarDropdownItem Background="Background.Dark">
                                    <BarLink To="allow-user-mod">Allow User Mod</BarLink>
                                </BarDropdownItem>
                            </BarDropdownMenu>
                        </BarDropdown>
                    </BarItem>
                </Authorized>
            </AuthorizeView>
            <AuthorizeView Context="context3" Roles="@($"{ApplicationRoles.Administrator}")">
                <Authorized>
                    <BarItem>
                        <BarDropdown RightAligned>
                            <BarDropdownToggle>Administration</BarDropdownToggle>
                            <BarDropdownMenu Background="Background.Dark">
                                <BarDropdownItem Background="Background.Dark">
                                    <BarLink To="quartz-manager">Quartz.NET Manager</BarLink>
                                </BarDropdownItem>
                                <BarDropdownItem Background="Background.Dark">
                                    <BarLink To="role-manager">Role Manager</BarLink>
                                </BarDropdownItem>
                                <BarDropdownItem Background="Background.Dark">
                                    <BarLink To="manual-mod-link">Manual Mod Link</BarLink>
                                </BarDropdownItem>
                                <BarDropdownItem Background="Background.Dark">
                                    <BarLink To="allow-user-mod">Allow User Mod</BarLink>
                                </BarDropdownItem>
                            </BarDropdownMenu>
                        </BarDropdown>
                    </BarItem>
                </Authorized>
            </AuthorizeView>
            <BarItem>
                <BarDropdown RightAligned>
                    <BarDropdownToggle>
                        Tools
                    </BarDropdownToggle>
                    <BarDropdownMenu Background="Background.Dark">
                        <AuthorizeView Context="context4" Roles="@($"{ApplicationRoles.User},{ApplicationRoles.Moderator},{ApplicationRoles.Administrator}")">
                            <Authorized>
                                <BarDropdownItem Background="Background.Dark">
                                    <BarLink To="articles">NexusMods Articles</BarLink>
                                </BarDropdownItem>
                                <BarDropdownItem Background="Background.Dark">
                                    <BarLink To="exposed-mods">NexusMods Exposed Mods</BarLink>
                                </BarDropdownItem>
                                <BarDropdownItem Background="Background.Dark">
                                    <BarLink To="statistics-top-exception-types">Statistics Top Exception Types</BarLink>
                                </BarDropdownItem>
                                <BarDropdownItem Background="Background.Dark">
                                    <BarLink To="statistics-involved-mods">Statistics Involved Mods</BarLink>
                                </BarDropdownItem>
                                <BarDropdownItem Background="Background.Dark">
                                    <BarLink To="game-public-api-diff">Public API Diff</BarLink>
                                </BarDropdownItem>
                                <BarDropdownItem Background="Background.Dark">
                                    <BarLink To="game-public-api-diff-search">Public API Diff Search</BarLink>
                                </BarDropdownItem>
                            </Authorized>
                        </AuthorizeView>
                        <BarDropdownItem Background="Background.Dark">
                            <BarLink To="localization-parser">Localization Parser</BarLink>
                        </BarDropdownItem>
                        <BarDropdownItem Background="Background.Dark">
                            <BarLink To="localizer">Localizer</BarLink>
                        </BarDropdownItem>
                        <BarDropdownItem Background="Background.Dark">
                            <BarLink To="assembly-string-editor">Assembly String Editor</BarLink>
                        </BarDropdownItem>
                    </BarDropdownMenu>
                </BarDropdown>
            </BarItem>
        </BarEnd>
        <BarEnd Style="margin-left: 0!important;">
            <AuthorizeView>
                <Authorized>
                    <BarItem>
                        <BarDropdown RightAligned>
                            <BarDropdownToggle>
                                <Figure Margin="Margin.Is0" Size="FigureSize.Is48x48">
                                    <FigureImage Margin="Margin.Is0" Source="@(_user?.ProfileUrl ?? FallbackIcon)" Border="Border.RoundedCircle" AlternateText="BUTR Logo"/>
                                </Figure>
                            </BarDropdownToggle>
                            <BarDropdownMenu Background="Background.Dark">
                                <BarDropdownItem Background="Background.Dark">
                                    <BarLink To="profile">My Profile</BarLink>
                                </BarDropdownItem>
                                <BarDropdownDivider Background="Background.Light"/>
                                <BarDropdownItem Background="Background.Dark">
                                    <BarLink To="logout">Logout</BarLink>
                                </BarDropdownItem>
                            </BarDropdownMenu>
                        </BarDropdown>
                    </BarItem>
                </Authorized>

                <NotAuthorized>
                    <BarItem>
                        <BarLink To="login">Login</BarLink>
                    </BarItem>
                </NotAuthorized>
            </AuthorizeView>
        </BarEnd>
    </BarMenu>
</Bar>

@code {

    private const string FallbackIcon = "images/default_profile.webp";
    private ProfileModel? _user;

    protected override async Task OnInitializedAsync()
    {
        _authenticationStateProvider.AuthenticationStateChanged += OnAuthenticationStateChanged;
        
        var state = await _authenticationStateProvider.GetAuthenticationStateAsync();
        await OnStateAsync(state);

        await base.OnInitializedAsync();
    }

    private void OnAuthenticationStateChanged(Task<AuthenticationState> stateTask)
    {
        stateTask.ContinueWith(async task => await OnStateAsync(await task));
    }

    private async Task OnStateAsync(AuthenticationState state)
    {
        if (state.User.Claims.FirstOrDefault(x => x.Type == ClaimTypes.Role) is { } claim && claim.Value !=  ApplicationRoles.Anonymous)
        {
            var profile = await _profileProvider.GetProfileAsync();
            _user = profile;
            StateHasChanged();
        }
    }

    public ValueTask DisposeAsync()
    {
        _authenticationStateProvider.AuthenticationStateChanged -= OnAuthenticationStateChanged;

        return ValueTask.CompletedTask;
    }

}