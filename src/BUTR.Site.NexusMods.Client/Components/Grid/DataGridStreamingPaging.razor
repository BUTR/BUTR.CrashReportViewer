@typeparam TItem where TItem : class

@inject ILocalStorageService _localStorage

<DataGrid @ref="@_dataGridRef" @attributes="@AdditionalAttributes"
          TItem="TItem"
          Data="@Values"
          SelectedRowChanged="@(model => { DataGridUtils.SelectDeselect(model, ref Value, ref _dataGridRef); })"
          ReadData="@OnReadData"
          TotalItems="@Metadata.TotalCount"
          CurrentPage="@Metadata.CurrentPage"
          PageSize="@Metadata.PageSize"
          SelectionMode="@DataGridSelectionMode.Single"
          ShowPager
          ShowPageSizes
          PagerOptions="@(new DataGridPagerOptions { PaginationPosition = PagerElementPosition.Center, ButtonRowPosition = PagerElementPosition.Start, TotalItemsPosition = PagerElementPosition.End })"
          PageSizes="@PageSizes"
          Filterable="@Filterable"
          CustomFilter="@OnCustomFilter"
          Sortable="@Sortable"
          Responsive
          Editable="@Editable"
          EditMode="@EditMode"
          Resizable="@Resizable"
          ResizeMode="@ResizeMode"
          DataGridColumns="@DataGridColumns"
          ButtonRowTemplate="@ButtonRowTemplate"
          DetailRowTemplate="@DetailRowTemplate"
          DetailRowTrigger="@DetailRowTrigger">
    <TotalItemsTemplate>
        @if (Metadata.TotalCount == 0)
        {
            <Text>@($"No available items. Time {AdditionalMetadata.QueryExecutionTimeMilliseconds}ms")</Text>
        }
        else
        {
            var curStart = (Metadata.CurrentPage - 1) * Metadata.PageSize + 1;
            var curEnd = Math.Min(Metadata.CurrentPage * Metadata.PageSize, Metadata.TotalCount);
            <Text>@($"{curStart} - {curEnd} ({Values.Count}) of {Metadata.TotalCount} items. Time {AdditionalMetadata.QueryExecutionTimeMilliseconds}ms")</Text>
        }
    </TotalItemsTemplate>
    <LoadingTemplate>
        <Progress @ref="@_progressRef" Color="@Color.Primary" Value="@_progressValue" Max="100"></Progress>
    </LoadingTemplate>
    <EmptyTemplate>
        @if (_progressValue != 0)
        {
            <Progress @ref="@_progressRef" Color="@Color.Primary" Value="@_progressValue" Max="100"></Progress>
        }
    </EmptyTemplate>
</DataGrid> 

@code {

    [Parameter]
    public bool Resizable { get; set; } = false;
    [Parameter]
    public TableResizeMode ResizeMode { get; set; }

    [Parameter]
    public bool Editable { get; set; } = false;
    [Parameter]
    public DataGridEditMode EditMode { get; set; }

    [Parameter]
    public bool Filterable { get; set; } = false;

    [Parameter]
    public bool Sortable { get; set; } = false;

    [Parameter(CaptureUnmatchedValues = true)]
    public Dictionary<string, object>? AdditionalAttributes { get; set; }
    
    [Parameter]
    public RenderFragment? DataGridColumns { get; set; }

    [Parameter]
    public RenderFragment<ButtonRowContext<TItem>>? ButtonRowTemplate { get; set; }

    [Parameter]
    public RenderFragment<TItem>? DetailRowTemplate { get; set; }
    
    [Parameter]
    public Func<DetailRowTriggerEventArgs<TItem>, bool>? DetailRowTrigger { get; set; }

    [Parameter]
    public Func<IEnumerable<DataGridColumnInfo>, IEnumerable<Filtering>>? GetFilters { get; set; }

    [Parameter]
    public Func<int, int, ICollection<Filtering>, ICollection<Sorting>, CancellationToken, Task<PagingStreamingData<TItem>>>? GetItems { get; set; }

    [Parameter]
    public int DefaultPageSize { get; set; } = UserSettings.DefaultPageSize;
    
    [Parameter]
    public IEnumerable<int> PageSizes { get; set; } = UserSettings.AvailablePageSizes;

    [Parameter]
    public Func<UserSettings, int>? GetPageSize { get; set; } = (settings => settings.PageSize); 
    
    [Parameter]
    public PagingMetadata Metadata { get; set; }
    
    [Parameter]
    public PagingAdditionalMetadata AdditionalMetadata { get; set; }

    public TItem? Value;
    public List<TItem> Values = new();

    private int _progressValue = default!;

    private DataGrid<TItem> _dataGridRef = default!;
    private Progress _progressRef = default!;

    public DataGridStreamingPaging()
    {
        Metadata = new PagingMetadata(1, 0, DefaultPageSize, 0);
        AdditionalMetadata = PagingAdditionalMetadata.Empty;
    }

    protected override async Task OnInitializedAsync()
    {
        Metadata = new(1, 0, await GetPageSizeInternal(), 0);
    }

    public Task Reload() => _dataGridRef.Reload();

    private async Task OnReadData(DataGridReadDataEventArgs<TItem> e)
    {
        if (e.CancellationToken.IsCancellationRequested)
            return;
        
        var sortings = e.Columns
            .Where(x => x.SortIndex != -1)
            .OrderBy(x => x.SortIndex)
            .Select(x => new Sorting(x.SortField, x.SortDirection.ToSortingType()))
            .ToArray();
        var filterings = GetFilters is not null ? GetFilters(e.Columns).ToArray() : Array.Empty<Filtering>();

        await LoadItems(e.Page, e.PageSize, filterings, sortings, e.CancellationToken);
    }

    private async Task LoadItems(int page, int pageSize, ICollection<Filtering> filterings, ICollection<Sorting> sortings, CancellationToken ct = default)
    {
        try
        {
            await using var progress = ProgressUtils.DoProgress(x => _progressValue = x, () => _progressValue, () => InvokeAsync(StateHasChanged));
        
            Values.Clear();
            StateHasChanged();

            var response = (GetItems is not null ? await GetItems(page, pageSize, filterings, sortings, ct) : null) ?? PagingStreamingData<TItem>.Empty;
            var status = await response.Status;
            Metadata = await response.Metadata;
            var counter = 0;
            var items = await response.Items;
            await foreach (var item in items.WithCancellation(ct))
            {
                Values.Add(item);
            
                counter++;
                if (counter >= 10)
                {
                    counter = 0;
                    StateHasChanged();
                }
            }
            AdditionalMetadata = await response.AdditionalMetadata;
            StateHasChanged();
        }
        finally
        {
            _progressValue = 0;
        }
    }

    private async Task<int> GetPageSizeInternal()
    {
        var userSettings = await _localStorage.GetItemAsync<UserSettings>("settings") ?? new();
        return GetPageSize?.Invoke(userSettings) ?? userSettings.PageSize;
    }

    private static bool OnCustomFilter(TItem model) => true;

}