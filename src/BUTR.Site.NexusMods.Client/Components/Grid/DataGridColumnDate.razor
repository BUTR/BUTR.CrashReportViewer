@typeparam TItem

<DataGridColumn TItem="TItem" Field="@Field" Caption="@Caption" Filterable="@Filterable" SortField="@SortField" Sortable="@Sortable" DisplayTemplate="@DisplayTemplate" @attributes="@AdditionalAttributes">
    <FilterTemplate>
        <DatePicker TValue="DateTime?"
                    ElementId="@ElementId"
                    TimeAs24hr
                    Placeholder="yyyy-MM-dd"
                    InputMode="@DateInputMode.Date"
                    SelectionMode="@DateInputSelectionMode.Range"
                    DatesChanged="@(range => OnDatesChanged(range, context))">
        </DatePicker>
    </FilterTemplate>
</DataGridColumn>

@code {
    
    [Parameter]
    public string? ElementId { get; set; }

    [Parameter]
    public string Field { get; set; } = string.Empty;

    [Parameter]
    public string Caption { get; set; } = string.Empty;

    [Parameter]
    public bool Filterable { get; set; } = false;

    [Parameter]
    public string SortField { get; set; } = string.Empty;

    [Parameter]
    public bool Sortable { get; set; } = false;

    [Parameter(CaptureUnmatchedValues = true)]
    public Dictionary<string, object>? AdditionalAttributes { get; set; }

    [Parameter]
    public RenderFragment<TItem>? DisplayTemplate { get; set; }

    private static void OnDatesChanged(IReadOnlyList<DateTime?>? range, FilterContext<TItem> context)
    {
        if (range is null)
        {
            context.TriggerFilterChange(string.Empty);
            return;
        }

        var dates = range.Where(x => x is not null).Select(x => x.GetValueOrDefault()).ToArray();

        if (dates.Length == 1)
        {
            var min = dates[0].Date;
            var max = dates[0].Date.AddDays(1).AddTicks(-1);
            context.TriggerFilterChange(new[] {min, max}.Select(x => x.ToString("O")).ToArray());
        }
        else
        {
            context.TriggerFilterChange(dates.Select(x => x.ToString("O")).ToArray());
        }
    }

}