@typeparam TItem

<DataGridColumn TItem="TItem" Field="@Field" Caption="@Caption" Filterable="@Filterable" SortField="@SortField" Sortable="@Sortable" DisplayTemplate="@DisplayTemplate" @attributes="@AdditionalAttributes">
    <FilterTemplate>
        <Autocomplete TItem="string"
                      TValue="string"
                      Data="@_autocompleteValues"
                      ReadData="@OnHandleReadData"
                      TextField="@(x => x)"
                      ValueField="@(x => x)"
                      SelectedValueChanged="@(value => { OnInputChanged(value, context); })"
                      Placeholder="@Placeholder"
                      MinLength="@MinLength"
                      Debounce="true"
                      DebounceInterval="500"
                      FreeTyping
                      AutoPreSelect
                      CloseOnSelection>
        </Autocomplete>
    </FilterTemplate>
</DataGridColumn>

@code {

    [Parameter]
    public string? ElementId { get; set; }
    
    [Parameter]
    public string Field { get; set; } = string.Empty;

    [Parameter]
    public string Caption { get; set; } = string.Empty;

    [Parameter]
    public bool Filterable { get; set; } = false;

    [Parameter]
    public string SortField { get; set; } = string.Empty;

    [Parameter]
    public bool Sortable { get; set; } = false;

    [Parameter]
    public string Placeholder { get; set; } = "Type to find...";

    [Parameter(CaptureUnmatchedValues = true)]
    public Dictionary<string, object>? AdditionalAttributes { get; set; }

    [Parameter]
    public RenderFragment<TItem>? DisplayTemplate { get; set; }

    [Parameter]
    public Func<string, CancellationToken, Task<ICollection<string>>>? GetAutocompleteValues { get; set; }

    [Parameter]
    public int MinLength { get; set; } = 0;

    private string _oldValue = string.Empty;
    private ICollection<string> _autocompleteValues = default!;

    private ElementReference _elementReference;
    private async Task OnHandleReadData(AutocompleteReadDataEventArgs autocompleteReadDataEventArgs)
    {
        if (autocompleteReadDataEventArgs.CancellationToken.IsCancellationRequested)
            return;
        
        var value = autocompleteReadDataEventArgs.SearchValue;
        
        if (_oldValue == value)
            return;
        
        if (value.Length < MinLength)
            return;

        if (!string.IsNullOrEmpty(_oldValue) && value.StartsWith(_oldValue))
        {
            // We don't need to call Autocomplete if we already got a set of values
            _autocompleteValues = _autocompleteValues.Where(x => x.StartsWith(value, StringComparison.OrdinalIgnoreCase)).ToArray();
        }
        else if (GetAutocompleteValues is not null)
        {
            _autocompleteValues = Array.Empty<string>();
            _autocompleteValues = await GetAutocompleteValues(value, autocompleteReadDataEventArgs.CancellationToken);
        }
        else
        {
            _autocompleteValues = Array.Empty<string>();
        }
        
        _oldValue = value;
    }

    private void OnInputChanged(string value, FilterContext<TItem> context)
    {
        context.TriggerFilterChange(value);
    }

}