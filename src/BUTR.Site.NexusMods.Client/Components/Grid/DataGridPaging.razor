@typeparam TItem where TItem : class

<DataGrid @ref="_dataGridRef" @attributes="@AdditionalAttributes"
          TItem="TItem"
          Data="@Values"
          SelectedRowChanged="@(model => { DataGridUtils.SelectDeselect(model, ref Value, ref _dataGridRef); })"
          ReadData="@OnReadData"
          TotalItems="@Metadata.TotalCount"
          CurrentPage="@Metadata.CurrentPage"
          PageSize="@Metadata.PageSize"
          SelectionMode="DataGridSelectionMode.Single"
          ShowPager
          ShowPageSizes
          PageSizes="@(new [] { 5, 10, 25, 50 })"
          Filterable="@Filterable"
          CustomFilter="@OnCustomFilter"
          Sortable="@Sortable"
          Responsive
          Editable="@Editable"
          EditMode="@EditMode"
          Resizable="@Resizable"
          ResizeMode="@ResizeMode"
          DataGridColumns="@DataGridColumns"
          ButtonRowTemplate="@ButtonRowTemplate"
          DetailRowTemplate="@DetailRowTemplate" 
          DetailRowTrigger="@DetailRowTrigger" >
    <EmptyTemplate>
        No result!
    </EmptyTemplate>

    <LoadingTemplate>
        <Progress @ref="_progressRef" Color="Color.Primary" Value="@_progressValue" Max="100"></Progress>
    </LoadingTemplate>
</DataGrid>

@code {

    public sealed record ItemsResponse(ICollection<TItem> Items, PagingMetadata Metadata);

    [Parameter]
    public bool Resizable { get; set; } = false;
    [Parameter]
    public TableResizeMode ResizeMode { get; set; }

    [Parameter]
    public bool Editable { get; set; } = false;
    [Parameter]
    public DataGridEditMode EditMode { get; set; }

    [Parameter]
    public bool Filterable { get; set; } = false;

    [Parameter]
    public bool Sortable { get; set; } = false;

    [Parameter(CaptureUnmatchedValues = true)]
    public Dictionary<string, object>? AdditionalAttributes { get; set; }
    
    [Parameter]
    public RenderFragment? DataGridColumns { get; set; }

    [Parameter]
    public RenderFragment<ButtonRowContext<TItem>>? ButtonRowTemplate { get; set; }

    [Parameter]
    public RenderFragment<TItem>? DetailRowTemplate { get; set; }
    
    [Parameter]
    public Func<DetailRowTriggerEventArgs<TItem>, bool> DetailRowTrigger { get; set; }

    [Parameter]
    public Func<IEnumerable<DataGridColumnInfo>, IEnumerable<Filtering>>? GetFilters { get; set; }

    [Parameter]
    public Func<int, int, ICollection<Filtering>, ICollection<Sorting>, CancellationToken, Task<ItemsResponse>>? GetItems { get; set; }

    public TItem? Value;
    public ICollection<TItem> Values = default!;
    public PagingMetadata Metadata = new(1, 0, 50, 0);

    private int _progressValue = default!;

    private DataGrid<TItem> _dataGridRef = default!;
    private Progress _progressRef = default!;

    public Task Reload() => _dataGridRef.Reload();

    private async Task OnReadData(DataGridReadDataEventArgs<TItem> e)
    {
        if (!e.CancellationToken.IsCancellationRequested)
        {
            var sortings = e.Columns
                .Where(x => x.SortIndex != -1)
                .OrderBy(x => x.SortIndex)
                .Select(x => new Sorting(x.SortField, x.SortDirection.ToSortingType()))
                .ToArray();
            var filterings = GetFilters is not null ? GetFilters(e.Columns).ToArray() : Array.Empty<Filtering>();
            await LoadItems(e.Page, e.PageSize, filterings, sortings, CancellationToken.None);
        }
    }

    private async Task LoadItems(int page, int pageSize, ICollection<Filtering> filterings, ICollection<Sorting> sortings, CancellationToken ct = default)
    {
        await using var progress = ProgressUtils.DoProgress(x => _progressValue = x, () => _progressValue, () => InvokeAsync(StateHasChanged));
        var response = (GetItems is not null ? await GetItems(page, pageSize, filterings, sortings, ct) : null) ?? new(Array.Empty<TItem>(), PagingMetadata.Empty);
        Values = response.Items;
        Metadata = response.Metadata;
    }

    private static bool OnCustomFilter(TItem model) => true;

}