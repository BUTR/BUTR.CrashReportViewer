@attribute [AllowAnonymous]
@page "/assembly-string-editor"

@using Mono.Cecil
@using Mono.Cecil.Cil
@using AssemblyDefinition = Mono.Cecil.AssemblyDefinition

@implements IAsyncDisposable

@inject DownloadFileService _downloadFileService

<Card Margin="@Margin.Is4" Overflow="@Overflow.Auto">
    <CardHeader>
        <CardTitle Size="4" Margin="@Margin.Is0">Assembly String Editor</CardTitle>
    </CardHeader>
    <CardBody>
        <Fields>
            <Field>
                <FieldLabel ColumnSize="@ColumnSize.Is1">Files</FieldLabel>
                <FieldBody>
                    <FileEdit Changed="@OnFileSelected"/>
                </FieldBody>
            </Field>
        </Fields>
        <Field>
            <DataGridInMemory @ref="@_dataGridRef" TItem="LocalizationString" Editable EditMode="@DataGridEditMode.Inline" Resizable ResizeMode="@TableResizeMode.Header">
                <DataGridColumns>
                    <DataGridCommandColumn TItem="LocalizationString" NewCommandAllowed="@false" DeleteCommandAllowed="@false"/>
                    <DataGridColumn TItem="LocalizationString" ElementId="assembly" Field="@nameof(LocalizationString.Assembly)" Caption="@nameof(LocalizationString.Assembly)"/>
                    <DataGridColumn TItem="LocalizationString" ElementId="text" Field="@nameof(LocalizationString.Text)" Caption="@nameof(LocalizationString.Text)" Editable>
                        <EditTemplate>
                            <TextEdit Text="@((string) context.CellValue)" TextChanged="@(v => OnEdit(context, v))"/>
                        </EditTemplate>
                    </DataGridColumn>
                    <DataGridColumn TItem="LocalizationString" ElementId="location" Field="@nameof(LocalizationString.Location)" Caption="@nameof(LocalizationString.Location)"/>
                </DataGridColumns>
            </DataGridInMemory>
            <Button Color="@Color.Primary" Disabled="@(_dataGridRef?.Values.Count <= 0)" Clicked="@OnClear">Clear</Button>
            <Button Color="@Color.Primary" Disabled="@(_dataGridRef?.Values.Count <= 0)" Clicked="@OnExport">Export Assembly</Button>
        </Field>
    </CardBody>
</Card>

@code {

    private record LocalizationString(string Assembly, string Text, string Location, Action<string> Replace);

    private Stream? _currentFileStream;
    private object? _currentFile; // We need to hide the type so LazyLoad can work
    private string? _currentFileName;

    private DataGridInMemory<LocalizationString>? _dataGridRef;

    private async Task OnFileSelected(FileChangedEventArgs e)
    {
        _dataGridRef?.Values.Clear();
        if (_currentFile is AssemblyDefinition assemblyDefinition)
            assemblyDefinition.Dispose();
        if (_currentFileStream is not null)
            await _currentFileStream.DisposeAsync();

        if (e.Files.Length != 1)
            return;

        var file = e.Files[0];
        await using var ms = new MemoryStream();
        await file.WriteToStreamAsync(ms);
        ms.Seek(0, SeekOrigin.Begin);
        ParseLibrary(file.Name, ms);
    }

    private Task OnEdit(CellEditContext<LocalizationString> context, string value)
    {
        context.Item.Replace(value);
        context.CellValue = value;

        return Task.CompletedTask;
    }

    private Task OnClear()
    {
        _dataGridRef?.Values.Clear();
        return Task.CompletedTask;
    }

    private async Task OnExport()
    {
        if (_currentFile is AssemblyDefinition assemblyDefinition && !string.IsNullOrEmpty(_currentFileName))
        {
            await using var ms = new MemoryStream();
            assemblyDefinition.Write(ms, new WriterParameters { DeterministicMvid = true });
            ms.Seek(0, SeekOrigin.Begin);
            await _downloadFileService.DownloadFileAsync(_currentFileName, "application/octet-stream", ms);
        }
    }

    private void ParseLibrary(string name, Stream assemblyStream)
    {
        var assemblyDefinition = AssemblyDefinition.ReadAssembly(assemblyStream);
        _currentFile = assemblyDefinition;
        _currentFileName = name;
        _currentFileStream = assemblyStream;

        foreach (var fieldDefinition in assemblyDefinition.MainModule.Types.SelectMany(x => x.Fields))
        {
            if (!fieldDefinition.IsLiteral)
                continue;

            if (fieldDefinition.Constant is string text && !string.IsNullOrEmpty(text) && !LocalizationUtils.IsTranslationString(text))
                _dataGridRef?.Values.Add(new LocalizationString(name, text, fieldDefinition.FullName, value => fieldDefinition.Constant = value));
        }

        foreach (var methodDefinition in assemblyDefinition.MainModule.Types.SelectMany(x => x.Methods))
        {
            if (!methodDefinition.HasBody)
                continue;

            foreach (var codeInstruction in methodDefinition.Body.Instructions)
            {
                if (codeInstruction.Operand is string text && !string.IsNullOrEmpty(text) && !LocalizationUtils.IsTranslationString(text))
                {
                    _dataGridRef?.Values.Add(new LocalizationString(name, text, methodDefinition.FullName, value =>
                    {
                        var ilProcessor = methodDefinition.Body.GetILProcessor();
                        ilProcessor.Replace(codeInstruction, Instruction.Create(codeInstruction.OpCode, value));
                    }));
                }
            }
        }

        foreach (var customAttribute in assemblyDefinition.MainModule.CustomAttributes)
        {
            for (var i = 0; i < customAttribute.ConstructorArguments.Count; i++)
            {
                var constructorArgument = customAttribute.ConstructorArguments[i];
                if (constructorArgument.Value is string text && !string.IsNullOrEmpty(text) && !LocalizationUtils.IsTranslationString(text))
                {
                    var iCopy = i;
                    _dataGridRef?.Values.Add(new LocalizationString(name, text, customAttribute.AttributeType.Name, value =>
                        customAttribute.ConstructorArguments[iCopy] = new CustomAttributeArgument(constructorArgument.Type, value)));
                }
            }
        }
    }

    public async ValueTask DisposeAsync()
    {
        _dataGridRef?.Values.Clear();
        if (_currentFile is AssemblyDefinition assemblyDefinition)
            assemblyDefinition.Dispose();
        if (_currentFileStream is not null)
            await _currentFileStream.DisposeAsync();
    }

}