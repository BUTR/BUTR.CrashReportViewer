@attribute [AllowAnonymous]
@page "/localization-parser"

@using CsvHelper
@using CsvHelper.Configuration

@inject DownloadFileService _downloadFileService

<Card Margin="Margin.Is4" Overflow="Overflow.Auto">
    <CardHeader>
        <CardTitle Size="4" Margin="Margin.Is0">Localization Parser</CardTitle>
    </CardHeader>
    <CardBody>
        <Fields>
            <Field>
                <FieldLabel ColumnSize="ColumnSize.Is1">Files</FieldLabel>
                <FieldBody>
                    <FileEdit Changed="@OnFileSelected" Multiple="true" />
                </FieldBody>
            </Field>
        </Fields>
        <Field>
            <DataGridInMemory @ref="_dataGridRef" TItem="LocalizationString" Resizable ResizeMode="TableResizeMode.Header">
                <DataGridColumns>
                    <DataGridColumn TItem="LocalizationString" Field="@nameof(LocalizationString.Assembly)" Caption="@nameof(LocalizationString.Assembly)"/>
                    <DataGridColumn TItem="LocalizationString" Field="@nameof(LocalizationString.Text)" Caption="@nameof(LocalizationString.Text)"/>
                </DataGridColumns>
            </DataGridInMemory>
            <Button Color="Color.Primary" Disabled="@(_dataGridRef.Values.Count <= 0)" Clicked="@(OnClear)">Clear</Button>
            <Button Color="Color.Primary" Disabled="@(_dataGridRef.Values.Count <= 0)" Clicked="@(OnExport)">Export as CSV</Button>
        </Field>
    </CardBody>
</Card>


@code {

    private record LocalizationString(string Assembly, string Text);

    private DataGridPaging<LocalizationString> _dataGridRef = default!;

    private async Task OnFileSelected(FileChangedEventArgs e)
    {
        foreach (var file in e.Files)
        {
            var ms = new MemoryStream();
            await file.WriteToStreamAsync(ms);
            ms.Seek(0, SeekOrigin.Begin);
            await ParseLibrary(file.Name, ms);
        }
    }

    private Task OnClear()
    {
        _dataGridRef.Values.Clear();
        return Task.CompletedTask;
    }

    private async Task OnExport()
    {
        await using var ms = new MemoryStream();
        await using var csv = new CsvWriter(new StreamWriter(ms), new CsvConfiguration(CultureInfo.InvariantCulture)
        {
            Delimiter = ";"
        });
        await csv.WriteRecordsAsync(_dataGridRef.Values);
        await csv.FlushAsync();
        ms.Seek(0, SeekOrigin.Begin);
        await _downloadFileService.DownloadFileAsync("localization.csv", "text/csv", ms);
    }

    private async Task ParseLibrary(string name, Stream assemblyStream)
    {
        await using var _ = assemblyStream;
        using var reader = new PEReader(assemblyStream);
        var metadata = reader.GetMetadataReader();

        foreach (var fieldDefinitionHandle in metadata.FieldDefinitions)
        {
            var fieldDefinition = metadata.GetFieldDefinition(fieldDefinitionHandle);

            if (!fieldDefinition.Attributes.HasFlag(FieldAttributes.Literal))
                continue;

            var constantHandle = fieldDefinition.GetDefaultValue();
            if (constantHandle.IsNil)
                continue;

            var constant = metadata.GetConstant(constantHandle);
            if (constant.TypeCode != ConstantTypeCode.String)
                continue;

            var blob = metadata.GetBlobReader(constant.Value);
            if (blob.ReadConstant(constant.TypeCode) is string text && !string.IsNullOrEmpty(text) && LocalizationUtils.IsTranslationString(text))
                _dataGridRef.Values.Add(new(name, text));
        }

        foreach (var methodDefinitionHandle in metadata.MethodDefinitions)
        {
            var methodDefinition = metadata.GetMethodDefinition(methodDefinitionHandle);

            if (methodDefinition.RelativeVirtualAddress == 0)
                continue;

            var body = reader.GetMethodBody(methodDefinition.RelativeVirtualAddress);
            foreach (var codeInstruction in ILReader.GetInstructions(metadata, body))
            {
                if (codeInstruction.OperandType != OperandType.InlineString)
                    continue;

                var ilReader = body.GetILReader();
                ilReader.Offset = codeInstruction.OperandOffset;
                var metadataToken = ilReader.ReadInt32();
                string? text;
                try
                {
                    var userString = MetadataTokens.UserStringHandle(metadataToken);
                    text = metadata.GetUserString(userString);
                }
                catch (BadImageFormatException)
                {
                    text = null;
                }
                if (!string.IsNullOrEmpty(text) && LocalizationUtils.IsTranslationString(text))
                {
                    _dataGridRef.Values.Add(new(name, text));
                }
                break;
            }
        }
    }

}