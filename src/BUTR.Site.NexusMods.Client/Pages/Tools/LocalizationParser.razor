@attribute [AllowAnonymous]
@page "/localization-parser"

@using CsvHelper
@using CsvHelper.Configuration
@using Mono.Cecil

@inject DownloadFileService _downloadFileService

<Card Margin="Margin.Is4" Overflow="Overflow.Auto">
    <CardHeader>
        <CardTitle Size="4" Margin="Margin.Is0">Localization Parser</CardTitle>
    </CardHeader>
    <CardBody>
        <FileEdit Changed="@OnFileSelected" Multiple="true" />
        <DataGrid @ref="_dataGridRef"
                  TItem="LocalizationString"
                  Data="@_entries"
                  SelectedRowChanged="SelectDeselect"
                  SelectionMode="DataGridSelectionMode.Single"
                  Resizable
                  ResizeMode="TableResizeMode.Header"
                  Responsive>
            <DataGridColumns>
                <DataGridColumn TItem="LocalizationString" Field="@nameof(LocalizationString.Assembly)" Caption="@nameof(LocalizationString.Assembly)" Sortable="false" />
                <DataGridColumn TItem="LocalizationString" Field="@nameof(LocalizationString.Text)" Caption="@nameof(LocalizationString.Text)" Sortable="false" />
            </DataGridColumns>
        </DataGrid>
        <Button Color="Color.Primary" Disabled="@(_entries.Count <= 0)" Clicked="@(OnClear)">
            Clear
        </Button>
        <Button Color="Color.Primary" Disabled="@(_entries.Count <= 0)" Clicked="@(OnExport)">
            Export as CSV
        </Button>
    </CardBody>
</Card>


@code {

    private static bool IsTranslationString(in ReadOnlySpan<char> span)
    {
        if (span.Length < 3)
            return false;

        if (span[0] != '{' || span[1] != '=')
            return false;

        if (span.IndexOf('}') == -1)
            return false;

        return true;
    }

    private record LocalizationString(string Assembly, string Text);

    private LocalizationString? _entry;
    private readonly List<LocalizationString> _entries = new();

    private DataGrid<LocalizationString?> _dataGridRef = default!;

    private void SelectDeselect(LocalizationString model)
    {
        if (_entry != model)
        {
            _entry = model;
        }
        else if (_entry is not null)
        {
            _dataGridRef.SelectedRow = null;
            _entry = null;
        }
        else
        {
            _entry = model;
        }
    }

    private async Task OnFileSelected(FileChangedEventArgs e)
    {
        foreach (var file in e.Files)
        {
            var ms = new MemoryStream();
            await file.WriteToStreamAsync(ms);
            ms.Seek(0, SeekOrigin.Begin);
            await ParseLibrary(file.Name, ms);
        }
    }

    private Task OnClear()
    {
        _entries.Clear();
        return Task.CompletedTask;
    }

    private async Task OnExport()
    {
        await using var ms = new MemoryStream();
        await using var csv = new CsvWriter(new StreamWriter(ms), new CsvConfiguration(CultureInfo.InvariantCulture)
        {
            Delimiter = ";"
        });
        await csv.WriteRecordsAsync(_entries);
        await csv.FlushAsync();
        ms.Seek(0, SeekOrigin.Begin);
        await _downloadFileService.DownloadFileAsync("localization.csv", "text/csv", ms);
    }

    private async Task ParseLibrary(string name, Stream assemblyStream)
    {
        await using var _ = assemblyStream;
        using var assemblyDefinition = AssemblyDefinition.ReadAssembly(assemblyStream);

        foreach (var fieldDefinition in assemblyDefinition.MainModule.Types.SelectMany(x => x.Fields))
        {
            if (!fieldDefinition.IsLiteral)
                continue;

            if (fieldDefinition.Constant is string text && !string.IsNullOrEmpty(text) && IsTranslationString(text))
                _entries.Add(new(name, text));
        }

        foreach (var methodDefinition in assemblyDefinition.MainModule.Types.SelectMany(x => x.Methods))
        {
            if (!methodDefinition.HasBody)
                continue;

            foreach (var codeInstruction in methodDefinition.Body.Instructions)
            {
                if (codeInstruction.Operand is string text  && !string.IsNullOrEmpty(text) && IsTranslationString(text))
                    _entries.Add(new(name, text));
            }
        }
    }

}
