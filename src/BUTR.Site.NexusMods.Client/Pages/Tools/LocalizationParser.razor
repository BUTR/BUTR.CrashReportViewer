@attribute [AllowAnonymous]
@page "/localization-parser"

@using CsvHelper
@using CsvHelper.Configuration

@inject DownloadFileService _downloadFileService

<Card Margin="@Margin.Is4" Overflow="@Overflow.Auto">
    <CardHeader>
        <CardTitle Size="4" Margin="@Margin.Is0">Localization Parser</CardTitle>
    </CardHeader>
    <CardBody>
        <Fields>
            <Field>
                <FieldLabel ColumnSize="@ColumnSize.Is1">Files</FieldLabel>
                <FieldBody>
                    <FileEdit Changed="@OnFileSelected" Multiple />
                </FieldBody>
            </Field>
        </Fields>
        <Field>
            <DataGridInMemory @ref="@_dataGridRef" TItem="LocalizationString" Resizable ResizeMode="@TableResizeMode.Header">
                <DataGridColumns>
                    <DataGridColumn TItem="LocalizationString" ElementId="assembly" Field="@nameof(LocalizationString.Assembly)" Caption="@nameof(LocalizationString.Assembly)"/>
                    <DataGridColumn TItem="LocalizationString" ElementId="text" Field="@nameof(LocalizationString.Text)" Caption="@nameof(LocalizationString.Text)"/>
                </DataGridColumns>
            </DataGridInMemory>
            <Button Color="@Color.Primary" Disabled="@(_dataGridRef?.Values.Count <= 0)" Clicked="@OnClear">Clear</Button>
            <Button Color="@Color.Primary" Disabled="@(_dataGridRef?.Values.Count <= 0)" Clicked="@OnExport">Export as CSV</Button>
        </Field>
    </CardBody>
</Card>


@code {

    private record LocalizationString(string Assembly, string Text);

    private DataGridInMemory<LocalizationString>? _dataGridRef;

    private async Task OnFileSelected(FileChangedEventArgs e)
    {
        if (_dataGridRef is null) return;

        foreach (var file in e.Files)
        {
            await using var ms = new MemoryStream();
            await file.WriteToStreamAsync(ms);
            ms.Seek(0, SeekOrigin.Begin);
            foreach (var entry in AssemblyReader.ParseAssemblyLocalizations(ms).Select(x => new LocalizationString(file.Name, x.Original)))
                _dataGridRef.Values.Add(entry);
        }
    }

    private Task OnClear()
    {
        _dataGridRef?.Values.Clear();
        return Task.CompletedTask;
    }

    private async Task OnExport()
    {
        await using var ms = new MemoryStream();
        await using var csv = new CsvWriter(new StreamWriter(ms), new CsvConfiguration(CultureInfo.InvariantCulture)
        {
            Delimiter = ";"
        });
        await csv.WriteRecordsAsync(_dataGridRef?.Values ?? Enumerable.Empty<LocalizationString>());
        await csv.FlushAsync();
        ms.Seek(0, SeekOrigin.Begin);
        await _downloadFileService.DownloadFileAsync("localization.csv", "text/csv", ms);
    }

}