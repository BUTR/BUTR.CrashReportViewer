@attribute [AllowAnonymous]
@page "/localizer"

@inject DownloadFileService _downloadFileService

<Card Margin="Margin.Is4" Overflow="Overflow.Auto">
    <CardHeader>
        <CardTitle Size="4" Margin="Margin.Is0">Localizer</CardTitle>
    </CardHeader>
    <CardBody>
        <Fields>
            <Field ColumnSize="ColumnSize.Is3">
                <FieldLabel>Language</FieldLabel>
                <Autocomplete TItem="string"
                              TValue="string"
                              Data="@_languages"
                              TextField="@(x => x)"
                              ValueField="@(x => x)"
                              @bind-SelectedValue="@_language"
                              Placeholder="English"
                              Filter="AutocompleteFilter.StartsWith"
                              FreeTyping />
            </Field>
            <Field>
                <FieldLabel ColumnSize="ColumnSize.Is1">Files</FieldLabel>
                <FieldBody>
                    <FileEdit Changed="@OnFileSelected" Multiple="true"/>
                </FieldBody>
            </Field>
        </Fields>
        <Field>
            <DataGridInMemory @ref="@_dataGridRef" TItem="StringEntry" Editable EditMode="DataGridEditMode.Inline" Resizable ResizeMode="TableResizeMode.Header">
                <DataGridColumns>
                    <DataGridCommandColumn TItem="StringEntry" NewCommandAllowed="false" DeleteCommandAllowed="false"/>
                    <DataGridColumn TItem="StringEntry" Field="@nameof(StringEntry.Id)" Caption="@nameof(StringEntry.Id)"/>
                    <DataGridColumn TItem="StringEntry" Field="@nameof(StringEntry.Original)" Caption="@nameof(StringEntry.Original)"/>
                    <DataGridColumn TItem="StringEntry" Field="@nameof(StringEntry.Translation)" Caption="@nameof(StringEntry.Translation)" Editable>
                        <EditTemplate>
                            <TextEdit Text="@((string) context.CellValue)" TextChanged="@(v => context.CellValue = v)"/>
                        </EditTemplate>
                    </DataGridColumn>
                </DataGridColumns>
            </DataGridInMemory>
            <Button Color="Color.Primary" Disabled="@(_dataGridRef?.Values.Count <= 0)" Clicked="@(OnClear)">Clear</Button>
            <Button Color="Color.Primary" Disabled="@(_dataGridRef?.Values.Count <= 0)" Clicked="@(OnExport)">Export as XML</Button>
        </Field>
    </CardBody>
</Card>


@code {

    private static readonly IEnumerable<string> _languages = new[]
    {
        "English",
        "Português (BR)",
        "简体中文",
        "繁體中文",
        "Deutsch",
        "Français",
        "Italiano",
        "日本語",
        "한국어",
        "Polski",
        "Русский",
        "Español (LA)",
        "Türkçe",
    };

    private record StringEntry(string Id, string Original, string Translation);

    private string _language = string.Empty;

    private DataGridInMemory<StringEntry>? _dataGridRef;

    private async Task OnFileSelected(FileChangedEventArgs e)
    {
        if (_dataGridRef is null) return;

        foreach (var file in e.Files)
        {
            await using var ms = new MemoryStream();
            await file.WriteToStreamAsync(ms);
            ms.Seek(0, SeekOrigin.Begin);
            foreach (var entry in AssemblyReader.ParseAssemblyLocalizations(ms).Select(x => new StringEntry(x.Id, x.Original, x.Original)))
                _dataGridRef.Values.Add(entry);
        }
    }

    private Task OnClear()
    {
        _dataGridRef?.Values.Clear();
        return Task.CompletedTask;
    }

    private async Task OnExport()
    {
        if (_dataGridRef is null) return;

        await using var ms = new MemoryStream();
        var doc = new XmlDocument();

        var xmlDeclaration = doc.CreateXmlDeclaration("1.0", "UTF-8", null);
        var root = doc.DocumentElement;
        doc.InsertBefore(xmlDeclaration, root);

        var baseElement = doc.CreateElement(string.Empty, "base", string.Empty);
        baseElement.SetAttribute("xmlns:xsi", "http://www.w3.org/2001/XMLSchema-instance");
        baseElement.SetAttribute("xmlns:xsd", "http://www.w3.org/2001/XMLSchema");
        baseElement.SetAttribute("type", "string");
        doc.AppendChild(baseElement);

        var tagsElement = doc.CreateElement(string.Empty, "tags", string.Empty);
        baseElement.AppendChild(tagsElement);

        var languageElement = doc.CreateElement(string.Empty, "tag", string.Empty);
        languageElement.SetAttribute("language", _language);
        tagsElement.AppendChild(languageElement);

        var stringsElement = doc.CreateElement(string.Empty, "strings", string.Empty);
        baseElement.AppendChild(stringsElement);

        foreach (var entry in _dataGridRef.Values)
        {
            var stringElement = doc.CreateElement(string.Empty, "string", string.Empty);
            stringElement.SetAttribute("id", entry.Id);
            stringElement.SetAttribute("text", entry.Translation);
            stringsElement.AppendChild(stringElement);
        }

        doc.Save(ms);
        ms.Seek(0, SeekOrigin.Begin);
        await _downloadFileService.DownloadFileAsync("strings.xml", "application/xml", ms);
    }

}