@attribute [Authorize]
@page "/articles"

@inject INexusModsArticleClient _articlesClient
@inject TenantProvider _tenantProvider
@inject IJSRuntime _jsRuntime;

<Card Margin="@Margin.Is4" Overflow="@Overflow.Auto">
    <CardHeader>
        <CardTitle Size="4" Position="Position.Relative" Margin="@Margin.Is0">
            NexusMods Articles
            <Button Position="@Position.Absolute.Bottom.Is0.End.Is0.Translate.MiddleX" Clicked="@Refresh" Padding="@Padding.Is0" >
                <Icon Name="@Enum.GetName(IconName.Sync)" />
            </Button>
        </CardTitle>
    </CardHeader>
    <CardBody>
        <DataGridPaging TItem="NexusModsArticleModel" @ref="@_dataGridPagingRef" GetFilters="@GetFilters" GetItems="@GetArticles" Sortable Filterable>
            <DataGridColumns>
                <DataGridColumnText TItem="NexusModsArticleModel" Field="@nameof(NexusModsArticleModel.NexusModsArticleId)" Caption="Id" Sortable SortField="@nameof(EntityFields.NexusModsArticleId)"/>
                <DataGridColumnText TItem="NexusModsArticleModel" ElementId="article-title" Field="@nameof(NexusModsArticleModel.Title)" Caption="Title" Filterable Sortable SortField="@nameof(EntityFields.Title)"/>
                <DataGridColumnTextAutocomplete TItem="NexusModsArticleModel" ElementId="article-author" Field="@nameof(NexusModsArticleModel.Author)" Caption="Author" Filterable Sortable SortField="@nameof(EntityFields.Author)" MinLength="3" GetAutocompleteValues="GetAutocompleteValues"/>
                <DataGridColumnDate TItem="NexusModsArticleModel" ElementId="article-date" Field="@nameof(NexusModsArticleModel.CreateDate)" Caption="Date (UTC)" Filterable Sortable SortField="@nameof(EntityFields.CreateDate)">
                    <DisplayTemplate>@(context.CreateDate.ToString("yyyy-MM-dd HH:mm:ss"))</DisplayTemplate>
                </DataGridColumnDate>
            </DataGridColumns>

            <ButtonRowTemplate>
                <Button Color="@Color.Primary" Disabled="@(_dataGridPagingRef?.Value is null)" Clicked="@(async () => await OnClick(_dataGridPagingRef!.Value))">Open Article</Button>
            </ButtonRowTemplate>
        </DataGridPaging>
    </CardBody>
</Card>

@code {

    private enum EntityFields { NexusModsArticleId, Title, Author, CreateDate }

    private DataGridPaging<NexusModsArticleModel>? _dataGridPagingRef;

    private async Task<DataGridPaging<NexusModsArticleModel>.ItemsResponse?> GetArticles(int page, int pageSize, ICollection<Filtering> filters, ICollection<Sorting> sortings, CancellationToken ct = default)
    {
        var response = await _articlesClient.PaginatedAsync(new(page: page, pageSize: pageSize, filters: filters, sortings: sortings), cancellationToken: ct);
        return response is { Value: { } data } ? new(data.Metadata, data.Items, data.AdditionalMetadata) : null;
    }

    private async Task OnClick(NexusModsArticleModel? mod)
    {
        if (mod is not null)
            await _jsRuntime.InvokeVoidAsync("open", mod.Url(TenantUtils.FromTenantToGameDomain(await _tenantProvider.GetTenantAsync())!), "_blank");
    }

    private async Task<ICollection<string>> GetAutocompleteValues(string filter, CancellationToken ct) => (await _articlesClient.AutocompleteAsync(filter, ct)).Value ?? Array.Empty<string>();

    private static IEnumerable<Filtering> GetFilters(IEnumerable<DataGridColumnInfo> columnInfos)
    {
        foreach (var columnInfo in columnInfos)
        {
            if (columnInfo is { SortField: nameof(EntityFields.CreateDate), SearchValue: string[] dates })
            {
                yield return new Filtering(columnInfo.SortField, FilteringType.GreaterThanOrEqual, dates[0]);
                yield return new Filtering(columnInfo.SortField, FilteringType.LessThanOrEqual, dates[1]);
            }
            else if (columnInfo.SearchValue is string str)
            {
                if (str.Length >= 3)
                {
                    yield return new Filtering(columnInfo.SortField, FilteringType.StartsWith, str);
                }
            }
        }
    }

    private async Task Refresh(MouseEventArgs obj)
    {
        if (_dataGridPagingRef is not null)
            await _dataGridPagingRef.Reload();
    }

}