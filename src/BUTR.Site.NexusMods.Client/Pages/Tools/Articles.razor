@attribute [Authorize]
@page "/articles"

@inject IArticlesClient _articlesClient
@inject IJSRuntime _jsRuntime;

<Card Margin="Margin.Is4" Overflow="Overflow.Auto">
    <CardHeader>
        <CardTitle Size="4" Margin="Margin.Is0">NexusMods Articles</CardTitle>
    </CardHeader>
    <CardBody>
        <DataGridPaging TItem="ArticleModel" @ref="@_dataGridPagingRef" GetFilters="@GetFilters" GetItems="@GetArticles" Sortable Filterable>
            <DataGridColumns>
                <DataGridColumnText TItem="ArticleModel" Field="@nameof(ArticleModel.Id)" Caption="Id" Sortable SortField="@nameof(EntityFields.ArticleId)"/>
                <DataGridColumnText TItem="ArticleModel" Field="@nameof(ArticleModel.Title)" Caption="Title" Filterable Sortable SortField="@nameof(EntityFields.Title)"/>
                <DataGridColumnTextAutocomplete TItem="ArticleModel" Field="@nameof(ArticleModel.AuthorName)" Caption="Author" Filterable Sortable SortField="@nameof(EntityFields.AuthorName)" GetAutocompleteValues="GetAutocompleteValues"/>
                <DataGridColumnDateTime TItem="ArticleModel" Field="@nameof(ArticleModel.CreateDate)" Caption="Date (UTC)" Filterable Sortable SortField="@nameof(EntityFields.CreateDate)">
                    <DisplayTemplate>@(context.CreateDate.ToString("yyyy-MM-dd HH:mm:ss"))</DisplayTemplate>
                </DataGridColumnDateTime>
            </DataGridColumns>

            <ButtonRowTemplate>
                <Button Color="Color.Primary" Disabled="@(_dataGridPagingRef?.Value is null)" Clicked="@(async () => await OnClick(_dataGridPagingRef.Value))">Open Article</Button>
            </ButtonRowTemplate>
        </DataGridPaging>
    </CardBody>
</Card>

@code {

    private enum EntityFields { ArticleId, Title, AuthorName, CreateDate }

    private DataGridPaging<ArticleModel>? _dataGridPagingRef;

    private async Task<DataGridPaging<ArticleModel>.ItemsResponse?> GetArticles(int page, int pageSize, ICollection<Filtering> filterings, ICollection<Sorting> sortings, CancellationToken ct = default) =>
        await _articlesClient.PaginatedAsync(new ArticlesQuery(page, pageSize, filterings, sortings), ct) is { Data: { } data } ? new(data.Items, data.Metadata) : null;

    private async Task OnClick(ArticleModel? mod)
    {
        if (mod is not null)
            await _jsRuntime.InvokeVoidAsync("open", mod.Url, "_blank");
    }

    private async Task<ICollection<string>> GetAutocompleteValues(string filter) => (await _articlesClient.AutocompleteAsync(filter)).Data ?? Array.Empty<string>();

    private static IEnumerable<Filtering> GetFilters(IEnumerable<DataGridColumnInfo> columnInfos)
    {
        foreach (var columnInfo in columnInfos)
        {
            if (columnInfo is { SortField: nameof(EntityFields.CreateDate), SearchValue: string[] dates })
            {
                yield return new Filtering(columnInfo.SortField, FilteringType.GreaterThanOrEqual, dates[0]);
                yield return new Filtering(columnInfo.SortField, FilteringType.LessThanOrEqual, dates[1]);
            }
            else if (columnInfo.SearchValue is string str)
            {
                if (str.Length >= 3)
                {
                    yield return new Filtering(columnInfo.SortField, FilteringType.StartsWith, str);
                }
            }
        }
    }

}