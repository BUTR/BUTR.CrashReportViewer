@attribute [Authorize]
@page "/articles"

@inject INexusModsArticleClient _articlesClient
@inject IJSRuntime _jsRuntime;

<Card Margin="@Margin.Is4" Overflow="@Overflow.Auto">
    <CardHeader>
        <CardTitle Size="4" Position="Position.Relative" Margin="@Margin.Is0">
            NexusMods Articles
            <Button Position="@Position.Absolute.Bottom.Is0.End.Is0.Translate.MiddleX" Clicked="@Refresh" Padding="@Padding.Is0" >
                <Icon Name="@IconName.Sync" />
            </Button>
        </CardTitle>
    </CardHeader>
    <CardBody>
        <DataGridPaging TItem="NexusModsArticleModel" @ref="@_dataGridPagingRef" GetFilters="@GetFilters" GetItems="@GetArticles" Sortable Filterable>
            <DataGridColumns>
                <DataGridColumnText TItem="NexusModsArticleModel" Field="@nameof(NexusModsArticleModel.NexusModsArticleId)" Caption="Id" Sortable SortField="@nameof(EntityFields.NexusModsArticleId)"/>
                <DataGridColumnText TItem="NexusModsArticleModel" Field="@nameof(NexusModsArticleModel.Title)" Caption="Title" Filterable Sortable SortField="@nameof(EntityFields.Title)"/>
                <DataGridColumnTextAutocomplete TItem="NexusModsArticleModel" Field="@nameof(NexusModsArticleModel.Author)" Caption="Author" Filterable Sortable SortField="@nameof(EntityFields.Author)" GetAutocompleteValues="GetAutocompleteValues"/>
                <DataGridColumnDate TItem="NexusModsArticleModel" Field="@nameof(NexusModsArticleModel.CreateDate)" Caption="Date (UTC)" Filterable Sortable SortField="@nameof(EntityFields.CreateDate)">
                    <DisplayTemplate>@(context.CreateDate.ToString("yyyy-MM-dd HH:mm:ss"))</DisplayTemplate>
                </DataGridColumnDate>
            </DataGridColumns>

            <ButtonRowTemplate>
                <Button Color="@Color.Primary" Disabled="@(_dataGridPagingRef?.Value is null)" Clicked="@(async () => await OnClick(_dataGridPagingRef!.Value))">Open Article</Button>
            </ButtonRowTemplate>
        </DataGridPaging>
    </CardBody>
</Card>

@code {

    private enum EntityFields { NexusModsArticleId, Title, Author, CreateDate }

    private DataGridPaging<NexusModsArticleModel>? _dataGridPagingRef;

    private async Task<DataGridPaging<NexusModsArticleModel>.ItemsResponse?> GetArticles(int page, int pageSize, ICollection<Filtering> filterings, ICollection<Sorting> sortings, CancellationToken ct = default) =>
        await _articlesClient.PaginatedAsync(new PaginatedQuery(page, pageSize, filterings, sortings), ct) is { Data: { } data } ? new(data.Metadata, data.Items, data.AdditionalMetadata) : null;

    private async Task OnClick(NexusModsArticleModel? mod)
    {
        if (mod is not null)
            await _jsRuntime.InvokeVoidAsync("open", mod.Url, "_blank");
    }

    private async Task<ICollection<string>> GetAutocompleteValues(string filter) => (await _articlesClient.AutocompleteAsync(filter)).Data ?? Array.Empty<string>();

    private static IEnumerable<Filtering> GetFilters(IEnumerable<DataGridColumnInfo> columnInfos)
    {
        foreach (var columnInfo in columnInfos)
        {
            if (columnInfo is { SortField: nameof(EntityFields.CreateDate), SearchValue: string[] dates })
            {
                yield return new Filtering(columnInfo.SortField, FilteringType.GreaterThanOrEqual, dates[0]);
                yield return new Filtering(columnInfo.SortField, FilteringType.LessThanOrEqual, dates[1]);
            }
            else if (columnInfo.SearchValue is string str)
            {
                if (str.Length >= 3)
                {
                    yield return new Filtering(columnInfo.SortField, FilteringType.StartsWith, str);
                }
            }
        }
    }

    private async Task Refresh(MouseEventArgs obj)
    {
        if (_dataGridPagingRef is not null)
            await _dataGridPagingRef.Reload();
    }

}