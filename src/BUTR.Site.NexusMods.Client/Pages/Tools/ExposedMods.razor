@attribute [Authorize]
@page "/exposed-mods"

@inject IExposedModsClient _exposedModsClient
@inject IJSRuntime _jsRuntime;

<Card Margin="Margin.Is4" Overflow="Overflow.Auto">
    <CardHeader>
        <CardTitle Size="4" Margin="Margin.Is0">Exposed Mods</CardTitle>
    </CardHeader>
    <CardBody>
        <DataGridPaging TItem="ExposedModModel" @ref="@_dataGridPagingRef" GetFilters="@GetFilters" GetItems="@GetExposedMods" Sortable Filterable>
            <DataGridColumns>
                <DataGridColumnText TItem="ExposedModModel" Field="@nameof(ExposedModModel.Id)" Caption="Id" Sortable SortField="@nameof(EntityFields.NexusModsModId)"/>
                <DataGridColumnTextAutocomplete TItem="ExposedModModel" Field="@nameof(ExposedModModel.ModIds)" Caption="Mod Id's" Filterable Sortable SortField="@nameof(EntityFields.ModIds)" GetAutocompleteValues="GetAutocompleteValues">
                    <DisplayTemplate>@(string.Join(", ", context.ModIds))</DisplayTemplate>
                </DataGridColumnTextAutocomplete>
                <DataGridColumnDateTime TItem="ExposedModModel" Field="@nameof(ExposedModModel.LastCheckedDate)" Caption="Last Checked Date (UTC)" Filterable Sortable SortField="@nameof(EntityFields.LastCheckedDate)">
                    <DisplayTemplate>@(context.LastCheckedDate.ToString("yyyy-MM-dd HH:mm:ss"))</DisplayTemplate>
                </DataGridColumnDateTime>
            </DataGridColumns>

            <ButtonRowTemplate>
                <Button Color="Color.Primary" Disabled="@(_dataGridPagingRef?.Value is null)" Clicked="@(async () => await OnClick(_dataGridPagingRef.Value))">Open Mod</Button>
            </ButtonRowTemplate>
        </DataGridPaging>
    </CardBody>
</Card>

@code {

    private enum EntityFields { NexusModsModId, ModIds, LastCheckedDate }

    private DataGridPaging<ExposedModModel>? _dataGridPagingRef;

    private async Task<DataGridPaging<ExposedModModel>.ItemsResponse?> GetExposedMods(int page, int pageSize, ICollection<Filtering> filterings, ICollection<Sorting> sortings, CancellationToken ct = default) =>
        await _exposedModsClient.PaginatedAsync(new ExposedModsQuery(page, pageSize, filterings, sortings), ct) is { } response ? new(response.Items, response.Metadata) : null;

    private async Task OnClick(ExposedModModel? mod)
    {
        if (mod is not null)
            await _jsRuntime.InvokeVoidAsync("open", mod.Url, "_blank");
    }

    private Task<ICollection<string>> GetAutocompleteValues(string filter) => _exposedModsClient.AutocompleteAsync(filter);

    private static IEnumerable<Filtering> GetFilters(IEnumerable<DataGridColumnInfo> columnInfos)
    {
        foreach (var columnInfo in columnInfos)
        {
            if (columnInfo.SortField is nameof(EntityFields.LastCheckedDate) && columnInfo.SearchValue is string[] dates)
            {
                yield return new Filtering(columnInfo.SortField, FilteringType.GreaterThanOrEqual, dates[0]);
                yield return new Filtering(columnInfo.SortField, FilteringType.LessThanOrEqual, dates[1]);
            }
            else if (columnInfo.SearchValue is string str)
            {
                if (columnInfo.SortField is nameof(EntityFields.ModIds))
                {
                    yield return new Filtering(columnInfo.SortField, FilteringType.Contains, str);
                }
                else
                {
                    yield return new Filtering(columnInfo.SortField, FilteringType.StartsWith, str);
                }
            }
        }
    }

}