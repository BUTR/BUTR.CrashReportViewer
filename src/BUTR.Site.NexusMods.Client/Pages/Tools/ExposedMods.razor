@attribute [Authorize]
@page "/exposed-mods"

@inject IExposedModsClient _exposedModsClient
@inject TenantProvider _tenantProvider
@inject IJSRuntime _jsRuntime;

<Card Margin="@Margin.Is4" Overflow="@Overflow.Auto">
    <CardHeader>
        <CardTitle Size="4" Margin="@Margin.Is0">Exposed Mods</CardTitle>
    </CardHeader>
    <CardBody>
        <DataGridPaging TItem="ExposedNexusModsModModel" @ref="@_dataGridPagingRef" GetFilters="@GetFilters" GetItems="@GetExposedMods" Sortable Filterable>
            <DataGridColumns>
                <DataGridColumnText TItem="ExposedNexusModsModModel" ElementId="mod-id" Field="@nameof(ExposedNexusModsModModel.NexusModsModId)" Caption="NexusMods Mod Id" Filterable Sortable SortField="@nameof(EntityFields.NexusModsModId)"/>
                <DataGridColumnTextAutocomplete TItem="ExposedNexusModsModModel" ElementId="module-id" Field="@nameof(ExposedNexusModsModModel.Mods)" Caption="Module Id's" Filterable Sortable SortField="@nameof(EntityFields.ModuleId)" MinLength="3" GetAutocompleteValues="GetAutocompleteValues">
                    <DisplayTemplate>@(string.Join(", ", context.Mods.Select(x => x.ModuleId)))</DisplayTemplate>
                </DataGridColumnTextAutocomplete>
            </DataGridColumns>

            <ButtonRowTemplate>
                <Button Color="@Color.Primary" Disabled="@(_dataGridPagingRef?.Value is null)" Clicked="@(async () => await OnClick(_dataGridPagingRef!.Value))">Open Mod</Button>
            </ButtonRowTemplate>
        </DataGridPaging>
    </CardBody>
</Card>

@code {

    private enum EntityFields { NexusModsModId, ModuleId, LastUpdateDate }

    private DataGridPaging<ExposedNexusModsModModel>? _dataGridPagingRef;

    private async Task<DataGridPaging<ExposedNexusModsModModel>.ItemsResponse?> GetExposedMods(int page, int pageSize, ICollection<Filtering> filters, ICollection<Sorting> sortings, CancellationToken ct = default)
    {
        var response = await _exposedModsClient.PaginatedAsync(new(page: page, pageSize: pageSize, filters: filters, sortings: sortings), cancellationToken: ct);
        return response is { Value: { } data } ? new(data.Metadata, data.Items, data.AdditionalMetadata) : null;
    }

    private async Task OnClick(ExposedNexusModsModModel? mod)
    {
        if (mod is not null)
            await _jsRuntime.InvokeVoidAsync("open", mod.Url(TenantUtils.FromTenantToGameDomain(await _tenantProvider.GetTenantAsync())!), "_blank");
    }

    private async Task<ICollection<string>> GetAutocompleteValues(string filter, CancellationToken ct) => (await _exposedModsClient.AutocompleteAsync(new(filter), ct)).Value ?? Array.Empty<string>();

    private static IEnumerable<Filtering> GetFilters(IEnumerable<DataGridColumnInfo> columnInfos)
    {
        foreach (var columnInfo in columnInfos)
        {
            if (columnInfo is { SortField: nameof(EntityFields.LastUpdateDate), SearchValue: string[] dates })
            {
                yield return new Filtering(columnInfo.SortField, FilteringType.GreaterThanOrEqual, dates[0]);
                yield return new Filtering(columnInfo.SortField, FilteringType.LessThanOrEqual, dates[1]);
            }
            else if (columnInfo.SearchValue is string str)
            {
                if (columnInfo.SortField is nameof(EntityFields.NexusModsModId) && !string.IsNullOrEmpty(str))
                {
                    yield return new Filtering(columnInfo.SortField, FilteringType.Equal, str);
                }
                else if (str.Length >= 3)
                {
                    if (columnInfo.SortField is nameof(EntityFields.ModuleId))
                    {
                        yield return new Filtering(columnInfo.SortField, FilteringType.Contains, str);
                    }
                    else
                    {
                        yield return new Filtering(columnInfo.SortField, FilteringType.StartsWith, str);
                    }
                }
            }
        }
    }

}