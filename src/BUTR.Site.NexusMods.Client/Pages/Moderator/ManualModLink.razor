@attribute [Authorize(Roles = $"{ApplicationRoles.Administrator}, {ApplicationRoles.Moderator}")]
@page "/manual-mod-link"

@inject INotificationService _notificationService
@inject IModProvider _modProvider

<Card Margin="Margin.Is4">
    <CardHeader>
        <CardTitle Size="4" Margin="Margin.Is0">Manual Mod Link</CardTitle>
    </CardHeader>
    <CardBody>
        <Form>
            <Field>
                <FieldLabel>Mod Id</FieldLabel>
                <FieldBody>
                    <TextEdit Role="@TextRole.Text" @bind-Text="@_model.ModId" />
                </FieldBody>
            </Field>
            <Field>
                <FieldLabel>NexusMods Url</FieldLabel>
                <FieldBody>
                    <TextEdit Role="@TextRole.Url" @bind-Text="@_model.NexusModsUrl" Placeholder="https://nexusmods.com/mountandblade2bannerlord/mods/1"/>
                </FieldBody>
            </Field>
            <Field>
                <Button Color="Color.Primary" Type="@ButtonType.Submit" @bind-Loading="@_isLoading" Clicked="@OnSubmit" PreventDefaultOnSubmit>
                     <LoadingTemplate>
                        Linking...
                    </LoadingTemplate>
                    <ChildContent>
                        Link
                    </ChildContent>
                </Button>
            </Field>
        </Form>
    </CardBody>
</Card>

<Card Margin="Margin.Is4" Overflow="Overflow.Auto">
    <CardHeader>
        <CardTitle Size="4" Margin="Margin.Is0">Manual Mod Links</CardTitle>
    </CardHeader>
    <CardBody>
        <DataGridPaging @ref="@_dataGridRef" TItem="ModNexusModsManualLinkModel" GetItems="GetManualLinks">
            <DataGridColumns>
                <DataGridColumn TItem="ModNexusModsManualLinkModel" Field="@nameof(ModNexusModsManualLinkModel.ModId)" Caption="Mod Id"/>
                <DataGridColumn TItem="ModNexusModsManualLinkModel" Field="@nameof(ModNexusModsManualLinkModel.NexusModsId)" Caption="NexusMods Id"/>
            </DataGridColumns>
            <ButtonRowTemplate>
                <Button Color="Color.Primary" Disabled="@(_dataGridRef.Value is null)" Clicked="@(async () => await OnDisallow(context))">Unlink</Button>
            </ButtonRowTemplate>
        </DataGridPaging>
    </CardBody>
</Card>

@code {

    private sealed record ManualLinkModel
    {
        public string ModId { get; set; } = default!;
        public string NexusModsUrl { get; set; } = default!;
    }

    private bool _isLoading;

    private readonly ManualLinkModel _model = new() { ModId = string.Empty, NexusModsUrl = string.Empty };

    private DataGridPaging<ModNexusModsManualLinkModel> _dataGridRef = default!;
    
    private async Task OnSubmit()
    {
        _isLoading = true;

        try
        {
            if (await DoManualLink(_model))
            {
                await _notificationService.Success(
                    $"Linked '{_model.ModId}' to mod '{_model.NexusModsUrl}'!",
                    "Success!");
                await _dataGridRef.Reload();
            }
            else
            {
                await _notificationService.Error(
                    $"Failed to link '{_model.ModId}' to mod '{_model.NexusModsUrl}'!",
                    "Error!");
            }
        }
        catch
        {
            await _notificationService.Error(
                $"Failed to link '{_model.ModId}' to mod '{_model.NexusModsUrl}'!",
                "Error!");
        }

        _isLoading = false;
        StateHasChanged();
    }

    private async Task<DataGridPaging<ModNexusModsManualLinkModel>.ItemsResponse?> GetManualLinks(int page, int pageSize, ICollection<Filtering> filters, ICollection<Sorting> sortings, CancellationToken ct) =>
        await _modProvider.GetManualLinks(page, pageSize, ct) is { } response ? new(response.Items, response.Metadata) : null;

    private async Task OnDisallow(ButtonRowContext<ModNexusModsManualLinkModel?> context)
    {
        if (context.DeleteCommand.Item is not null && await DoManualUnlink(context.DeleteCommand.Item))
        {
            await context.DeleteCommand.Clicked.InvokeAsync();
        }
    }
    
    private async Task<bool> DoManualLink(ManualLinkModel model)
    {
        if (!ModsUtils.TryParse(_model.NexusModsUrl, out _, out var nexusModsId))
            return false;
        
        return await _modProvider.ManualLink(model.ModId, nexusModsId.Value);
    }
    private async Task<bool> DoManualUnlink(ModNexusModsManualLinkModel model)
    {
        return await _modProvider.ManualUnlink(model.ModId);
    }
}