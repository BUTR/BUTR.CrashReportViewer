@attribute [Authorize(Roles = $"{ApplicationRoles.Administrator}, {ApplicationRoles.Moderator}")]
@page "/allow-user-module-id"

@inject INotificationService _notificationService
@inject INexusModsUserClient _userClient

<Modal @ref="_modalRef">
    <ModalContent Size="@ModalSize.ExtraLarge" Centered>
        <ModalHeader>
            <ModalTitle>Remove Allowed Module Id</ModalTitle>
            <CloseButton />
        </ModalHeader>
        <ModalBody>
            @if (_dataGridRef?.Value is not null)
            {
                <Form>
                    <Field>
                        <FieldLabel>Module Id to Remove</FieldLabel>
                        <FieldBody>
                            <Select TValue="string" @bind-SelectedValue="@_moduleIdIdToDelete">
                                @{
                                    _moduleIdIdToDelete = _dataGridRef.Value.AllowedModuleIds.First();
                                    foreach (var allowedModId in _dataGridRef.Value.AllowedModuleIds)
                                    {
                                        <SelectItem Value="@allowedModId">@allowedModId</SelectItem>
                                    }
                                }
                            </Select>
                        </FieldBody>
                    </Field>
                </Form> 
            }
        </ModalBody>
        <ModalFooter>
            <Button Color="@Color.Secondary" Clicked="@(async () => await HideModal(false))">Cancel</Button>
            <Button Color="@Color.Primary" Clicked="@(async () => await HideModal(true))">Done</Button>
        </ModalFooter>
    </ModalContent>
</Modal>

<Card Margin="@Margin.Is4">
    <CardHeader>
        <CardTitle Size="4" Margin="@Margin.Is0">Allow User Module Id</CardTitle>
    </CardHeader>
    <CardBody>
        <Form>
            <Field>
                <FieldLabel>NexusMods User Url</FieldLabel>
                <FieldBody>
                    <TextEdit Role="@TextRole.Text" @bind-Text="@_model.UserUrl" Placeholder="https://nexusmods.com/users/1" />
                </FieldBody>
            </Field>
            <Field>
                <FieldLabel>Module Id</FieldLabel>
                <FieldBody>
                    <TextEdit Role="@TextRole.Text" @bind-Text="@_model.ModuleId" Placeholder="Bannerlord.Harmony" />
                </FieldBody>
            </Field>
            <Field>
                <Button Color="@Color.Primary" Type="@ButtonType.Submit" @bind-Loading="@_isLoading" Clicked="@OnSubmit" PreventDefaultOnSubmit>
                    <LoadingTemplate>Allowing...</LoadingTemplate>
                    <ChildContent>Allow</ChildContent>
                </Button>
            </Field>
        </Form>
    </CardBody>
</Card>
<Card Margin="@Margin.Is4" Overflow="@Overflow.Auto">
    <CardHeader>
        <CardTitle Size="4" Margin="@Margin.Is0">Allowed User Module Ids</CardTitle>
    </CardHeader>
    <CardBody>
        <DataGridPaging @ref="@_dataGridRef" TItem="NexusModsUserToModuleManualLinkModel" GetItems="@GetAllowUserMods">
            <DataGridColumns>
                <DataGridColumnText TItem="NexusModsUserToModuleManualLinkModel" Field="@nameof(NexusModsUserToModuleManualLinkModel.NexusModsUserId)" Caption="User Id"/>
                <DataGridColumnText TItem="NexusModsUserToModuleManualLinkModel" Field="@nameof(NexusModsUserToModuleManualLinkModel.AllowedModuleIds)" Caption="Allowed Module Ids">
                    <DisplayTemplate>@(string.Join(", ", context.AllowedModuleIds))</DisplayTemplate>
                </DataGridColumnText>
            </DataGridColumns>
            <ButtonRowTemplate>
                <Button Color="@Color.Primary" Disabled="@(_dataGridRef?.Value is null)" Clicked="@(async () => await OnDisallow(context))">
                    Disallow
                </Button>
            </ButtonRowTemplate>
        </DataGridPaging>
    </CardBody>
</Card>

@code {

    private sealed record AllowUserModel
    {
        public required string UserUrl { get; set; }
        public required string ModuleId { get; set; }
    }
    
    private bool _isLoading;

    private readonly AllowUserModel _model = new() { UserUrl = string.Empty, ModuleId = string.Empty };

    private string? _moduleIdIdToDelete;

    private Modal _modalRef = default!;
    private DataGridPaging<NexusModsUserToModuleManualLinkModel>? _dataGridRef;

    private async Task ShowModal() => await _modalRef.Show();

    private async Task HideModal(bool save)
    {
        await _modalRef.Hide();
        if (save && _dataGridRef?.Value is not null && _moduleIdIdToDelete is not null)
        {
            if (await _userClient.ToModuleManualUnlinkAsync(_dataGridRef.Value.NexusModsUserId, _moduleIdIdToDelete) is { HumanReadableError: var error } && string.IsNullOrEmpty(error))
            {
                await _notificationService.Success($"Disallowed succesfully!", "Success!");
                await _dataGridRef.Reload();
            }
            else
            {
                await _notificationService.Error($"Failed to disallow!", "Error!");
            }
        }
    }
    private async Task OnSubmit()
    {
        try
        {
            if (await DoUserAllowMod(_model))
            {
                await _notificationService.Success(
                    $"Assigned '{_model.ModuleId}' to user '{_model.UserUrl}'!",
                    "Success!");
                if (_dataGridRef is not null)
                    await _dataGridRef.Reload();
            }
            else
            {
                await _notificationService.Error(
                    $"Failed to assign '{_model.ModuleId}' to user '{_model.UserUrl}'!",
                    "Error!");
            }
        }
        catch
        {
            await _notificationService.Error(
                $"Failed to assign '{_model.ModuleId}' to user '{_model.UserUrl}'!",
                "Error!");
        }
    }

    private async Task<DataGridPaging<NexusModsUserToModuleManualLinkModel>.ItemsResponse?> GetAllowUserMods(int page, int pageSize, ICollection<Filtering> filterings, ICollection<Sorting> sortings, CancellationToken ct) =>
        await _userClient.ToModuleManualLinkPaginatedAsync(new(page, pageSize, filterings, sortings), ct) is { Data: { } data } ? new(data.Metadata, data.Items, data.AdditionalMetadata) : null;

    private async Task OnDisallow(ButtonRowContext<NexusModsUserToModuleManualLinkModel?> context)
    {
        if (context.DeleteCommand.Item is not null && await DoUserDisallowMod(context.DeleteCommand.Item))
        {
            //await context.DeleteCommand.Clicked.InvokeAsync();
        }
    }
    
    private async Task<bool> DoUserAllowMod(AllowUserModel model)
    {
        if (!NexusModsUtils.TryParse(model.UserUrl, out _, out var nexusModsId) && !uint.TryParse(model.UserUrl, out nexusModsId))
            return false;
        
        return await _userClient.ToModuleManualLinkAsync((int) nexusModsId, model.ModuleId) is { HumanReadableError: var error } && string.IsNullOrEmpty(error);
    }
    private async Task<bool> DoUserDisallowMod(NexusModsUserToModuleManualLinkModel model)
    {
        await ShowModal();
        return true;
    }

}