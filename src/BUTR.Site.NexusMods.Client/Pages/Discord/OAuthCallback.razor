@attribute [Authorize]
@page "/discord-oauth-callback"

@inject NavigationManager _navigationManager;
@inject IPageProgressService _pageProgressService
@inject ILocalStorageService _localStorage;
@inject AuthenticationProvider _authenticationProvider;
@inject IDiscordClient _discordClient;

<Container>
    <Row Flex="@Flex.JustifyContent.Center">
        <Column ColumnSize="@ColumnSize.Is7.OnWidescreen.IsAuto.OnDesktop">
            <Card Margin="@Margin.Is5.OnDesktop.Is4.OnTablet.Is3.OnMobile" Border="@Border.Is0.Rounded" Shadow="@Shadow.Small">
                <CardBody>
                    <Heading Padding="@Padding.Is3" Size="@HeadingSize.Is5" TextAlignment="@TextAlignment.Center" TextTransform="@TextTransform.Uppercase" TextWeight="@TextWeight.Bold">@_status</Heading>
                    <Divider/>
                        @if (_userInfo is not null)
                        {
                            <Row Margin="@Margin.Is2">
                                <Span><Anchor Style="text-decoration: none" To="@_userInfo.Url" Target="@Target.Blank">@_userInfo.Name</Anchor> was successfully linked with the BUTR Site!</Span>
                            </Row>
                        }
                        else
                        {
                            <Row Margin="@Margin.Is2">
                                <Spinner/>
                            </Row>
                        }
                    
                        @if (!string.IsNullOrEmpty(_message))
                        {
                            <Row Margin="@Margin.Is2">
                                <Span>@_message</Span>
                            </Row>
                        }
                    
                        @if (!string.IsNullOrEmpty(_image))
                        {
                            <Row Margin="@Margin.Is2">
                                <FigureImage Margin="@Margin.Is0" Source="@_image" AlternateText="A meme image displaying success or failure. Success is Brent Rambo giving a thumbs up. Failure is a horse failing to play with a gymnastics by kinda lying onto it ball and falling."></FigureImage>
                            </Row>
                        }
                    
                        <Row Margin="@Margin.Is2">
                            <Span>Use the "Linked Roles" option in servers with the BUTR Discord bot to claim your roles.</Span>
                        </Row>
                        <Row Margin="@Margin.Is2">
                            <Button Border="@Border.RoundedPill"
                                    TextTransform="@TextTransform.Uppercase"
                                    Padding="@Padding.Is2"
                                    TextWeight="@TextWeight.Bold"
                                    Color="@Color.Primary"
                                    Type="@ButtonType.Link"
                                    To="discord://-/"
                                    rel="noreferrer"
                                    Target="@Target.Blank">
                                <Figure Margin="@Margin.Is0" Size="@FigureSize.Is32x32">
                                    <FigureImage Margin="@Margin.Is0" AlternateText="Discord app icon." Source="images/discord.svg"/>
                                </Figure>
                                Back to Discord
                            </Button>
                        </Row>
                </CardBody>
            </Card>
        </Column>
    </Row>
</Container>

@code {

    private const string Success = "images/success.gif";
    private const string Failure = "images/failure.gif";
    
    private string _status = string.Empty;
    private string _message = string.Empty;
    private string _image = string.Empty;
    private DiscordUserInfo2? _userInfo;
    
    protected override async Task OnInitializedAsync()
    {
        await base.OnInitializedAsync();

        await _pageProgressService.Go(0, options => options.Color = Color.Info);
        if (!await _localStorage.ContainKeyAsync("discord_state"))
        {
            _status = "FAILURE";
            _message = "State verification failed.";
            _image = Failure;
            return;
        }

        var queries = _navigationManager.QueryString();
        var queryStatRaw = queries["state"];
        var queryCode = queries["code"];

        try
        {
            var state = await _localStorage.GetItemAsync<Guid>("discord_state");
            if (!Guid.TryParse(queryStatRaw, out var queryState) || state != queryState)
            {
                _status = "FAILURE";
                _message = "State verification failed.";
                _image = Failure;
                return;
            }

            await _pageProgressService.Go(25, options => options.Color = Color.Info);
            await _discordClient.LinkAsync(queryCode);
            await _pageProgressService.Go(50, options => options.Color = Color.Info);
            _ = await _authenticationProvider.ValidateAsync();

            await _pageProgressService.Go(75, options => options.Color = Color.Info);
            var userInfo = await _discordClient.GetUserInfoAsync();
            _userInfo = new DiscordUserInfo2(userInfo.Data);
            _status = "SUCCESS";
            _image = Success;
        }
        catch (ApiException)
        {
            _status = "FAILURE";
            _message = "Failed to link!";
            _image = Failure;
        }
        finally
        {
            await _localStorage.RemoveItemAsync("discord_state");
            await _pageProgressService.Go(null);
        }
    }

}