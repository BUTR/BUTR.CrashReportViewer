@attribute [Authorize]
@page "/profile"

@inject NavigationManager _navigationManager
@inject IProfileProvider _profileProvider

@if (_user is null)
{
    <Spinner/>
}
else
{
    <Container>
        <Card Margin="Margin.Is4" Background="Background.Light" Shadow="Shadow.Small">
            <CardHeader>
                <CardTitle Size="4" Margin="Margin.Is0">Profile</CardTitle>
            </CardHeader>
            <CardBody>
                @* Mobile *@
                <Div Display="Display.Block.OnMobile.None.OnDesktop">
                    <Row>
                        @ProfilePrimary(_user)
                    </Row>
                    <Row>
                        @ProfileSecondary(_user)
                    </Row>
                </Div>

                @* Desktop *@
                <Div Display="Display.Block.OnDesktop.None.OnMobile">
                    <Row Gutter="(5, 5)">
                        <Column ColumnSize="ColumnSize.Is4">
                            @ProfilePrimary(_user)
                        </Column>
                        <Column>
                            @ProfileSecondary(_user)
                        </Column>
                    </Row>
                </Div>
            </CardBody>
        </Card>
    </Container>
}

@code {

        private RenderFragment ProfilePrimary(ProfileModel user) =>
    @<Card Shadow="Shadow.Small">
        <CardBody TextAlignment="TextAlignment.Center">
            <CardImage Width="Width.Is50" Source="@user.ProfileUrl.Replace(@"{BASE}", _navigationManager.BaseUri)" Border="Border.RoundedCircle" Alt="Profile Image" />
            <CardTitle Size="5"><Blazorise.Link To="@user.Url">@user.Name</Blazorise.Link></CardTitle>
            <CardText TextColor="TextColor.Secondary">@user.Role</CardText>
            @if (user.IsPremium)
            {
                <CardText TextColor="TextColor.Secondary">Premium</CardText>
            }
            @if (user.IsSupporter)
            {
                <CardText TextColor="TextColor.Secondary">Supporter</CardText>
            }
        </CardBody>
    </Card>;

        private RenderFragment ProfileSecondary(ProfileModel user) =>
    @<Card Shadow="Shadow.Small">
        <CardBody>
            <Row>
                <Column ColumnSize="ColumnSize.Is3" TextWeight="TextWeight.Bold">Id</Column>
                <Column ColumnSize="ColumnSize.Is9" TextColor="TextColor.Secondary">@user.UserId</Column>
            </Row>
            <Divider />
            <Row>
                <Column ColumnSize="ColumnSize.Is3" TextWeight="TextWeight.Bold">Name</Column>
                <Column ColumnSize="ColumnSize.Is9" TextColor="TextColor.Secondary">@user.Name</Column>
            </Row>
            <Divider />
            <Row>
                <Column ColumnSize="ColumnSize.Is3" TextWeight="TextWeight.Bold">Email</Column>
                <Column ColumnSize="ColumnSize.Is9" TextColor="TextColor.Secondary">@user.Email</Column>
            </Row>
        </CardBody>
    </Card>;


    private ProfileModel? _user;

    protected override async Task OnInitializedAsync()
    {
        _user = await _profileProvider.GetProfileAsync();
    }

}
