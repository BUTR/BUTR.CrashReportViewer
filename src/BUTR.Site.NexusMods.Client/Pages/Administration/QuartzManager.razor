@attribute [Authorize(Roles = ApplicationRoles.Administrator)]
@page "/quartz-manager"

@inject IQuartzClient _quartzClient;

<Card Margin="@Margin.Is4">
    <CardHeader>
        <CardTitle Size="4" Margin="@Margin.Is0">Trigger Job</CardTitle>
    </CardHeader>
    <CardBody>
        <Form>
            <Field>
                <FieldLabel>Job Id</FieldLabel>
                <FieldBody>
                    <TextEdit Role="@TextRole.Text" @bind-Text="@_jobId"/>
                </FieldBody>
            </Field>
            <Field>
                <Button Color="@Color.Primary" Type="@ButtonType.Submit" Clicked="@OnSubmit" PreventDefaultOnSubmit>
                    Link
                </Button>
            </Field>
        </Form>
    </CardBody>
</Card>

<Card Margin="@Margin.Is4">
    <CardHeader>
        <CardTitle Size="4" Margin="@Margin.Is0">Job History</CardTitle>
    </CardHeader>
    <CardBody>
        <DataGridPaging @ref="@_dataGridRef" TItem="QuartzExecutionLogEntity" DetailRowTrigger="@(x => x.Item.LogId == _dataGridRef.Value?.LogId)" GetFilters="@GetFilters" GetItems="@Paging" Sortable Filterable>
            <DataGridColumns>
                <DataGridColumn TItem="QuartzExecutionLogEntity" Field="@nameof(QuartzExecutionLogEntity.JobName)" Caption="" Filterable="@false" Sortable="@false" >
                    <DisplayTemplate>
                        @if (context.IsSuccess == true)
                        {
                            <Icon Name="@IconName.CheckCircle" Style="@($"color: {Theme.ColorOptions.Success}")" />
                        }
                        else if (context.IsVetoed == true)
                        {
                            <Icon Name="@IconName.MinusCircle" Style="@($"color: {Theme.ColorOptions.Warning}")" />
                        }
                        else if (context.IsException == true)
                        {
                            <Icon Name="@IconName.TimesCircle" Style="@($"color: {Theme.ColorOptions.Danger}")" />
                        }
                        else
                        {
                            <Icon Name="@IconName.Circle" Style="@($"color: {Theme.ColorOptions.Info}")" />
                        }
                    </DisplayTemplate>
                </DataGridColumn>
                <DataGridColumnText TItem="QuartzExecutionLogEntity" Field="@nameof(QuartzExecutionLogEntity.MachineName)" Caption="Machine Name" Filterable Sortable SortField="@nameof(EntityFields.MachineName)" />
                <DataGridColumnText TItem="QuartzExecutionLogEntity" Field="@nameof(QuartzExecutionLogEntity.JobName)" Caption="Job" Filterable Sortable SortField="@nameof(EntityFields.JobName)" />
                <DataGridColumnText TItem="QuartzExecutionLogEntity" Field="@nameof(QuartzExecutionLogEntity.TriggerName)" Caption="Trigger" Filterable="@false" Sortable="@false" />
                <DataGridColumnDateTime TItem="QuartzExecutionLogEntity" Field="@nameof(QuartzExecutionLogEntity.ScheduleFireTimeUtc)" Caption="Schedule Fire Time" Filterable="@false" Sortable="@false" >
                    <DisplayTemplate>@(context.ScheduleFireTimeUtc?.ToString("yyyy-MM-dd HH:mm:ss") ?? string.Empty)</DisplayTemplate>
                </DataGridColumnDateTime>
                <DataGridColumnDateTime TItem="QuartzExecutionLogEntity" Field="@nameof(QuartzExecutionLogEntity.FireTimeUtc)" Caption="Actual Fire Time" Filterable Sortable SortField="@nameof(EntityFields.FireTimeUtc)" >
                    <DisplayTemplate>@(context.FireTimeUtc?.ToString("yyyy-MM-dd HH:mm:ss") ?? string.Empty)</DisplayTemplate>
                </DataGridColumnDateTime>
                <DataGridColumnTime TItem="QuartzExecutionLogEntity" Field="@nameof(QuartzExecutionLogEntity.JobRunTime)" Caption="Run Time" Filterable="@false" Sortable SortField="@nameof(EntityFields.JobRunTime)" >
                </DataGridColumnTime>
            </DataGridColumns>
            <DetailRowTemplate>
                <Field>
                    <FieldLabel>Run Instance Id</FieldLabel>
                    <TextEdit Text="@context.RunInstanceId" Disabled  />
                </Field>
                <Field>
                    <FieldLabel>Retry Count</FieldLabel>
                    <TextEdit Text="@((context.RetryCount ?? 0).ToString())" Disabled  />
                </Field>
                <Field>
                    <FieldLabel>Result</FieldLabel>
                    <TextEdit Text="@context.Result" Disabled  />
                </Field>
                <Field>
                    <FieldLabel>Stack Trace</FieldLabel>
                    <MemoEdit Text="@(context.ExecutionLogDetail?.ErrorStackTrace ?? string.Empty)" AutoSize Disabled />
                </Field>
            </DetailRowTemplate>
        </DataGridPaging>
    </CardBody>
</Card>

@code {

    private enum EntityFields { MachineName, JobName, FireTimeUtc, JobRunTime }

    [CascadingParameter]
    protected Theme Theme { get; set; } = default!;

    private string _jobId = string.Empty;
    
    private DataGridPaging<QuartzExecutionLogEntity> _dataGridRef = default!;
    
    private async Task<DataGridPaging<QuartzExecutionLogEntity>.ItemsResponse?> Paging(int page, int pageSize, ICollection<Filtering> filters, ICollection<Sorting> sortings, CancellationToken ct) =>
        await _quartzClient.HistoryPaginatedAsync(new PaginatedQuery(page, pageSize, filters, sortings), ct) is { Data: { } data } ? new(data.QueryExecutionTimeMilliseconds, data.Items, data.Metadata) : null;
    
    private async Task OnSubmit()
    {
        if (string.IsNullOrEmpty(_jobId)) return;

        await _quartzClient.TriggerJobAsync(_jobId);
    }
    
    private static IEnumerable<Filtering> GetFilters(IEnumerable<DataGridColumnInfo> columnInfos)
    {
        foreach (var columnInfo in columnInfos)
        {
            if (columnInfo is { SortField: nameof(EntityFields.FireTimeUtc),SearchValue: string[] fireTimeDates })
            {
                yield return new Filtering(columnInfo.SortField, FilteringType.GreaterThanOrEqual, fireTimeDates[0]);
                yield return new Filtering(columnInfo.SortField, FilteringType.LessThanOrEqual, fireTimeDates[1]);
            }
            else if (columnInfo is { SortField: nameof(EntityFields.JobRunTime),SearchValue: string[] runTimeDates })
            {
                yield return new Filtering(columnInfo.SortField, FilteringType.GreaterThanOrEqual, runTimeDates[0]);
                yield return new Filtering(columnInfo.SortField, FilteringType.LessThanOrEqual, runTimeDates[1]);
            }
            else if (columnInfo.SearchValue is string { Length: >= 3 } str)
            {
                if (columnInfo.SortField is nameof(EntityFields.MachineName) && !string.IsNullOrEmpty(str))
                {
                    yield return new Filtering(columnInfo.SortField, FilteringType.StartsWith, str);
                }
                else if (columnInfo.SortField is nameof(EntityFields.JobName) && !string.IsNullOrEmpty(str))
                {
                    yield return new Filtering(columnInfo.SortField, FilteringType.StartsWith, str);
                }
            }
        }
    }
}