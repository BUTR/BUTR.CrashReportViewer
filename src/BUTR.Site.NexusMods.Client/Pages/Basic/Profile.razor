@attribute [Authorize]
@page "/profile"

@inject NavigationManager _navigationManager
@inject IUserClient _userClient
@inject IDiscordClient _discordClient

@if (_user is null)
{
    <Spinner/>
}
else
{
    <Container>
        <Card Margin="@Margin.Is4" Shadow="@Shadow.Small">
            <CardHeader>
                <CardTitle Size="@(4)" Margin="@Margin.Is0">Profile</CardTitle>
            </CardHeader>
            <CardBody>
                @* Mobile *@
                <Div Display="@Display.Block.OnMobile.None.OnDesktop">
                    <Row>
                        @ProfilePrimary(_user)
                    </Row>
                    <Row>
                        @ProfileSecondary(_user)
                    </Row>
                </Div>

                @* Desktop *@
                <Div Display="@Display.Block.OnDesktop.None.OnMobile">
                    <Row @ref="@_gutterRow">
                        <Column ColumnSize="@ColumnSize.Is4">
                            @ProfilePrimary(_user)
                        </Column>
                        <Column>
                            @ProfileSecondary(_user)
                        </Column>
                    </Row>
                </Div>
            </CardBody>
        </Card>
    </Container>
}

@code {
    
    private RenderFragment ProfilePrimary(ProfileModel user) =>
        @<Card Shadow="@Shadow.Small">
            <CardBody TextAlignment="@TextAlignment.Center">
                <CardImage Width="@Width.Is50" Source="@user.ProfileUrl.Replace(@"{BASE}", _navigationManager.BaseUri)" Border="@Border.RoundedCircle" Alt="@("Profile Image")"/>
                <CardTitle Size="@(5)"><Blazorise.Link To="@user.Url">@user.Name</Blazorise.Link></CardTitle>
                <CardText TextColor="@TextColor.Secondary">@user.Role</CardText>
                @if (user.IsPremium)
                {
                    <CardText TextColor="@TextColor.Secondary">Premium</CardText>
                }
                @if (user.IsSupporter)
                {
                    <CardText TextColor="@TextColor.Secondary">Supporter</CardText>
                }
            </CardBody>
        </Card>;

    private RenderFragment ProfileSecondary(ProfileModel user) =>
        @<Card Shadow="@Shadow.Small">
            <CardBody>
                <Row>
                    <Column ColumnSize="@ColumnSize.Is3" TextWeight="@TextWeight.Bold">Id</Column>
                    <Column ColumnSize="@ColumnSize.Is9" TextColor="@TextColor.Secondary">@user.UserId</Column>
                </Row>
                <Divider/>
                <Row>
                    <Column ColumnSize="@ColumnSize.Is3" TextWeight="@TextWeight.Bold">Name</Column>
                    <Column ColumnSize="@ColumnSize.Is9" TextColor="@TextColor.Secondary">@user.Name</Column>
                </Row>
                <Divider/>
                <Row>
                    <Column ColumnSize="@ColumnSize.Is3" TextWeight="@TextWeight.Bold">Email</Column>
                    <Column ColumnSize="@ColumnSize.Is9" TextColor="@TextColor.Secondary">@user.Email</Column>
                </Row>
                <Divider/>
                <Row>
                    <Column ColumnSize="@ColumnSize.Is3" TextWeight="@TextWeight.Bold">Discord</Column>
                    <Column ColumnSize="@ColumnSize.Is9" TextColor="@TextColor.Secondary"><Anchor Style="text-decoration: none" To="@(_discordUser?.Url ?? "discord-linked-role")" Target="@Target.Blank">@(_discordUser?.Name ?? "Not Linked")</Anchor></Column>
                </Row>
            </CardBody>
        </Card>;

    private ProfileModel? _user;
    private DiscordUserInfo2? _discordUser;
    private Row? _gutterRow;

    protected override async Task OnInitializedAsync()
    {
        _user = (await _userClient.ProfileAsync()).Data;
        var discordUserInfo = _user?.DiscordUserId is not null ? await _discordClient.GetUserInfoAsync() : null;
        _discordUser = discordUserInfo is { Data: { } data } ? new DiscordUserInfo2(data) : null;
        if (_gutterRow is not null)
            _gutterRow.Gutter = (5,5);
    }

    protected override Task OnParametersSetAsync()
    {
        if (_gutterRow is not null)
            _gutterRow.Gutter = (5,5);

        return Task.CompletedTask;
    }

}