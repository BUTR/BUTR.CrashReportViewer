@attribute [Authorize]
@page "/linked-mods"

@inject IModProvider _modProvider
@inject IJSRuntime _jsRuntime;

<Card Margin="Margin.Is4">
    <CardHeader>
        <CardTitle Size="4" Margin="Margin.Is0">Link Mod</CardTitle>
    </CardHeader>
    <CardBody>
        <Form>
            <Field>
                <FieldLabel>Mod Url</FieldLabel>
                <FieldBody>
                    <TextEdit Role="@TextRole.Url" @bind-Text="@_model.ModUrl" Placeholder="https://nexusmods.com/mountandblade2bannerlord/mods/1"></TextEdit>
                </FieldBody>
            </Field>
            <Field>
                <Button Color="Color.Primary" Type="@ButtonType.Submit" @bind-Loading="@_isLoading" Clicked="@OnSubmit" PreventDefaultOnSubmit>
                    <LoadingTemplate>Linking...</LoadingTemplate>
                    <ChildContent>Link</ChildContent>
                </Button>
            </Field>
        </Form>
    </CardBody>
</Card>

<Card Margin="Margin.Is4" Overflow="Overflow.Auto">
    <CardHeader>
        <CardTitle Size="4" Margin="Margin.Is0">Linked Mods</CardTitle>
    </CardHeader>
    <CardBody>
        <DataGridPaging @ref="@_dataGridRef" TItem="ModModel" GetItems="GetMods">
            <DataGridColumns>
                <DataGridColumn TItem="ModModel" Field="@nameof(ModModel.Name)" Caption="Name"/>
                <DataGridColumn TItem="ModModel" Field="@nameof(ModModel.AllowedUserIds)" Caption="Allowed User Ids">
                    <DisplayTemplate>@(string.Join(", ", context.AllowedUserIds))</DisplayTemplate>
                </DataGridColumn>
            </DataGridColumns>

            <ButtonRowTemplate>
                <Button Color="Color.Primary" Disabled="@(_dataGridRef.Value is null)" Clicked="@(async () => await OnClick(_dataGridRef.Value))">Open Page</Button>
                <Button Color="Color.Danger" Disabled="@(_dataGridRef.Value is null)" Clicked="@(async () => await OnDelete(context))">
                    <LoadingTemplate>Unlinking...</LoadingTemplate>
                    <ChildContent>Unlink</ChildContent>
                </Button>
            </ButtonRowTemplate>
        </DataGridPaging>
    </CardBody>
</Card>

@code {

    private sealed record LinkModModel
    {
        public string ModUrl { get; set; } = default!;
    }

    private bool _isLoading;

    private LinkModModel _model = new();

    private DataGridPaging<ModModel?> _dataGridRef = default!;

    private async Task OnSubmit()
    {
        _isLoading = true;

        if (await DoLinkMod(_model))
        {
            _model = new LinkModModel();
            await _dataGridRef.Reload();
        }

        _isLoading = false;
        StateHasChanged();
    }

    private async Task<bool> DoLinkMod(LinkModModel model)
    {
        if (!ModsUtils.TryParse(model.ModUrl, out var gameDomain, out var modId))
            return false;

        return await _modProvider.LinkMod(modId.Value);
    }

    private async Task<bool> DoUnlinkMod(ModModel model)
    {
        return await _modProvider.UnlinkMod(model.ModId);
    }

    private async Task<DataGridPaging<ModModel>.ItemsResponse> GetMods(int page, int pageSize, ICollection<Filtering> filterings, ICollection<Sorting> sortings, CancellationToken ct = default) =>
        await _modProvider.GetMods(page, pageSize, ct) is { } response ? new(response.Items, response.Metadata) : null;

    private async Task OnClick(ModModel? mod)
    {
        if (mod is not null)
            await _jsRuntime.InvokeVoidAsync("open", mod.Url, "_blank");
    }

    private async Task OnDelete(ButtonRowContext<ModModel?> context)
    {
        if (context.DeleteCommand.Item is not null && await DoUnlinkMod(context.DeleteCommand.Item))
        {
            await context.DeleteCommand.Clicked.InvokeAsync();
        }
    }

}