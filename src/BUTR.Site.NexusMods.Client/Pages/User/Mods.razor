@attribute [Authorize]
@page "/mods"

@inject INexusModsUserClient _userClient
@inject TenantProvider _tenantProvider
@inject IJSRuntime _jsRuntime;

<Card Margin="@Margin.Is4">
    <CardHeader>
        <CardTitle Size="4" Margin="@Margin.Is0">Link Mod</CardTitle>
    </CardHeader>
    <CardBody>
        <Form>
            <Field>
                <FieldLabel>NexusMods Mod Url</FieldLabel>
                <FieldBody>
                    <TextEdit ElementId="mod-url" Role="@TextRole.Url" @bind-Text="@_model.ModUrl" Placeholder="https://nexusmods.com/mountandblade2bannerlord/mods/1"></TextEdit>
                </FieldBody>
            </Field>
            <Field>
                <Button Color="@Color.Primary" Type="@ButtonType.Submit" @bind-Loading="@_isLoading" Clicked="@OnSubmit" PreventDefaultOnSubmit>
                    <LoadingTemplate>Linking...</LoadingTemplate>
                    <ChildContent>Link</ChildContent>
                </Button>
            </Field>
        </Form>
    </CardBody>
</Card>

<Card Margin="@Margin.Is4" Overflow="@Overflow.Auto">
    <CardHeader>
        <CardTitle Size="4" Margin="@Margin.Is0">Linked Mods</CardTitle>
    </CardHeader>
    <CardBody>
        <DataGridPaging @ref="@_dataGridRef" TItem="UserLinkedModModel" GetItems="@GetMods" FixedHeader>
            <DataGridColumns>
                <DataGridColumn TItem="UserLinkedModModel" ElementId="mod-id" Field="@nameof(UserLinkedModModel.NexusModsModId)" Caption="Mod Id"/>
                <DataGridColumn TItem="UserLinkedModModel" ElementId="mod-name" Field="@nameof(UserLinkedModModel.Name)" Caption="Name"/>
                <DataGridColumn TItem="UserLinkedModModel" ElementId="user-ids" Field="@nameof(UserLinkedModModel.AllowedNexusModsUserIds)" Caption="Allowed User Ids">
                    <DisplayTemplate>@(string.Join(", ", context.AllowedNexusModsUserIds))</DisplayTemplate>
                </DataGridColumn>
                <DataGridColumn TItem="UserLinkedModModel" ElementId="manual-user-ids" Field="@nameof(UserLinkedModModel.ManuallyLinkedNexusModsUserIds)" Caption="Manually Linked User Ids">
                    <DisplayTemplate>@(string.Join(", ", context.ManuallyLinkedNexusModsUserIds))</DisplayTemplate>
                </DataGridColumn>
                <DataGridColumn TItem="UserLinkedModModel" ElementId="confirmed-mod-ids" Field="@nameof(UserLinkedModModel.ManuallyLinkedModuleIds)" Caption="Confirmed Module Id">
                    <DisplayTemplate>@(string.Join(", ", context.ManuallyLinkedModuleIds))</DisplayTemplate>
                </DataGridColumn>
                <DataGridColumn TItem="UserLinkedModModel" ElementId="known-mod-ids" Field="@nameof(UserLinkedModModel.ManuallyLinkedModuleIds)" Caption="Known Module Id">
                    <DisplayTemplate>@(string.Join(", ", context.KnownModuleIds))</DisplayTemplate>
                </DataGridColumn>
            </DataGridColumns>

            <ButtonRowTemplate>
                <Button Color="@Color.Primary" Disabled="@(_dataGridRef?.Value is null)" Clicked="@(async () => await OnClick(_dataGridRef!.Value))">Open Page</Button>
                <Button Color="@Color.Danger" Disabled="@(_dataGridRef?.Value is null)" Clicked="@(async () => await OnDelete(context))">
                    <LoadingTemplate>Unlinking...</LoadingTemplate>
                    <ChildContent>Unlink</ChildContent>
                </Button>
            </ButtonRowTemplate>
        </DataGridPaging>
    </CardBody>
</Card>

<Card Margin="@Margin.Is4" Overflow="@Overflow.Auto">
    <CardHeader>
        <CardTitle Size="4" Margin="@Margin.Is0">Available Mods</CardTitle>
    </CardHeader>
    <CardBody>
        <DataGridPaging @ref="@_dataGridRef2" TItem="UserAvailableModModel" GetItems="@GetAllowedMods" PageSizes="@(new[] { 5, 10, 20 })" FixedHeader>
            <DataGridColumns>
                <DataGridColumn TItem="UserAvailableModModel" ElementId="mod-id" Field="@nameof(UserAvailableModModel.NexusModsModId)" Caption="Mod Id"/>
                <DataGridColumn TItem="UserAvailableModModel" ElementId="mod-name" Field="@nameof(UserAvailableModModel.Name)" Caption="Name"/>
            </DataGridColumns>
        </DataGridPaging>
    </CardBody>
</Card>

@code {

    private sealed record LinkModModel
    {
        public string ModUrl { get; set; } = string.Empty;
    }

    private bool _isLoading;

    private LinkModModel _model = new();

    private DataGridPaging<UserLinkedModModel>? _dataGridRef;
    private DataGridPaging<UserAvailableModModel>? _dataGridRef2;

    private async Task OnSubmit()
    {
        _isLoading = true;

        if (await DoLinkMod(_model))
        {
            _model = new LinkModModel();
            if (_dataGridRef is not null)
                await _dataGridRef.Reload();
        }

        _isLoading = false;
        StateHasChanged();
    }

    private async Task<bool> DoLinkMod(LinkModModel model)
    {
        if (!NexusModsUtils.TryParseModUrl(model.ModUrl, out _, out var modId) && !uint.TryParse(model.ModUrl, out modId))
            return false;

        return await _userClient.AddNexusModsModLinkAsync((int) modId) is { Error: null };
    }

    private async Task<bool> DoUnlinkMod(UserLinkedModModel model)
    {
        return await _userClient.RemoveNexusModsModLinkAsync(modId: model.NexusModsModId) is { Error: null };
    }

    private async Task<DataGridPaging<UserLinkedModModel>.ItemsResponse?> GetMods(int page, int pageSize, ICollection<Filtering> filters, ICollection<Sorting> sortings, CancellationToken ct = default)
    {
        var response = await _userClient.GetNexusModsModsPaginatedAsync(new(page: page, pageSize: pageSize, filters: filters, sortings: sortings), cancellationToken: ct);
        return response is { Value: { } data } ? new(data.Metadata, data.Items, data.AdditionalMetadata) : null;
    }

    private async Task<DataGridPaging<UserAvailableModModel>.ItemsResponse?> GetAllowedMods(int page, int pageSize, ICollection<Filtering> filters, ICollection<Sorting> sortings, CancellationToken ct = default)
    {
        var response = await _userClient.GetNexusModsModsPaginateAvailabledAsync(new(page: page, pageSize: pageSize, filters: filters, sortings: sortings), cancellationToken: ct);
        return response is { Value: { } data } ? new(data.Metadata, data.Items, data.AdditionalMetadata) : null;
    }

    private async Task OnClick(UserLinkedModModel? mod)
    {
        if (mod is not null)
            await _jsRuntime.InvokeVoidAsync("open", mod.Url(TenantUtils.FromTenantToGameDomain(await _tenantProvider.GetTenantAsync())!), "_blank");
    }

    private async Task OnDelete(ButtonRowContext<UserLinkedModModel> context)
    {
        if (context.DeleteCommand.Item is not null && await DoUnlinkMod(context.DeleteCommand.Item))
        {
            await context.DeleteCommand.Clicked.InvokeAsync();
        }
    }

}