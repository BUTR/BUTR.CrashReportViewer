@inject INotificationService _notificationService
@inject INexusModsUserClient _userClient

<Modal @ref="_modalRef">
    <ModalContent Size="@ModalSize.ExtraLarge" Centered>
        <ModalHeader>
            <ModalTitle>Remove Allowed Mod Id</ModalTitle>
            <CloseButton />
        </ModalHeader>
        <ModalBody>
            @if (_dataGridRef?.Value is not null)
            {
                <Form>
                    <Field>
                        <FieldLabel>User Id to Remove</FieldLabel>
                        <FieldBody>
                            <Select ElementId="nexusmods-user-id" TValue="int?" @bind-SelectedValue="@_userIdToDelete">
                                @{
                                    _userIdToDelete = _dataGridRef.Value.NexusModsUsers.Select(x => x.NexusModsUserId).First();
                                    foreach (var allowedUserId in _dataGridRef.Value.NexusModsUsers.Select(x => x.NexusModsUserId))
                                    {
                                        <SelectItem Value="@allowedUserId">@allowedUserId.ToString()</SelectItem>
                                    }
                                }
                            </Select>
                        </FieldBody>
                    </Field>
                </Form> 
            }
        </ModalBody>
        <ModalFooter>
            <Button Color="@Color.Secondary" Clicked="@(async () => await HideModal(false))">Cancel</Button>
            <Button Color="@Color.Primary" Clicked="@(async () => await HideModal(true))">Done</Button>
        </ModalFooter>
    </ModalContent>
</Modal>

<Card Margin="@Margin.Is2">
    <CardHeader>
        <CardTitle Size="4" Margin="@Margin.Is0">Allow User Mod</CardTitle>
    </CardHeader>
    <CardBody>
        <Form>
            <Fields>
                <Field ColumnSize="ColumnSize.Is6.OnDesktop">
                    <FieldLabel RequiredIndicator>NexusMods User Url</FieldLabel>
                    <FieldBody>
                        <TextEdit ElementId="nexusmods-user-url" Role="@TextRole.Url" @bind-Text="@_model.UserUrl" Placeholder="https://nexusmods.com/users/1 or https://next.nexusmods.com/profile/Dark0ne" />
                    </FieldBody>
                </Field>
                <Field ColumnSize="ColumnSize.Is6.OnDesktop">
                    <FieldLabel RequiredIndicator>NexusMods Mod Url</FieldLabel>
                    <FieldBody>
                        <TextEdit ElementId="nexusmods-mod-url" Role="@TextRole.Url" @bind-Text="@_model.UserUrl" Placeholder="https://nexusmods.com/mountandblade2bannerlord/mods/1" />
                    </FieldBody>
                </Field>
            </Fields>
            <Field>
                <Button Color="@Color.Primary" Type="@ButtonType.Submit" @bind-Loading="@_isLoading" Clicked="@OnSubmit" PreventDefaultOnSubmit>
                    <LoadingTemplate>Allowing...</LoadingTemplate>
                    <ChildContent>Allow</ChildContent>
                </Button>
            </Field>
        </Form>
    </CardBody>
</Card>
<Card Margin="@Margin.Is2" Overflow="@Overflow.Auto">
    <CardHeader>
        <CardTitle Size="4" Margin="@Margin.Is0">Allowed Mods to Users</CardTitle>
    </CardHeader>
    <CardBody>
        <DataGridPaging @ref="@_dataGridRef" TItem="UserManuallyLinkedNexusModsModModel" GetItems="@GetAllowUserMods" FixedHeader>
            <DataGridColumns>
                <DataGridColumnText TItem="UserManuallyLinkedNexusModsModModel" Field="@nameof(UserManuallyLinkedNexusModsModModel.NexusModsModId)" Caption="Mod Id"/>
                <DataGridColumnText TItem="UserManuallyLinkedNexusModsModModel" Field="@nameof(UserManuallyLinkedNexusModsModModel.NexusModsUsers)" Caption="Allowed User Ids">
                    <DisplayTemplate>@(string.Join(", ", context.NexusModsUsers.Select(x => $"{x.NexusModsUserId} ({x.NexusModsUsername})")))</DisplayTemplate>
                </DataGridColumnText>
            </DataGridColumns>
            <ButtonRowTemplate>
                <Button Color="@Color.Primary" Disabled="@(_dataGridRef?.Value is null)" Clicked="@(async () => await OnDisallow(context))">
                    Disallow
                </Button>
            </ButtonRowTemplate>
        </DataGridPaging>
    </CardBody>
</Card>

@code {

    private sealed record AllowUserModel
    {
        public required string UserUrl { get; set; }
        public required string ModUrl { get; set; }
    }
    
    private bool _isLoading;

    private readonly AllowUserModel _model = new() { UserUrl = string.Empty, ModUrl = string.Empty };

    private int? _userIdToDelete;

    private Modal _modalRef = default!;
    private DataGridPaging<UserManuallyLinkedNexusModsModModel>? _dataGridRef;

    private async Task ShowModal() => await _modalRef.Show();

    private async Task HideModal(bool save)
    {
        await _modalRef.Hide();
        if (save && _dataGridRef?.Value is not null && _userIdToDelete is not null)
        {
            if (await _userClient.RemoveNexusModsModManualLinkAsync(userId: (int) _userIdToDelete, modId: _dataGridRef.Value.NexusModsModId, cancellationToken: CancellationToken.None) is { Error: null })
            {
                await _notificationService.Success("Disallowed succesfully!", "Success!");
                await _dataGridRef.Reload();
            }
            else
            {
                await _notificationService.Error("Failed to disallow!", "Error!");
            }
        }
    }
    private async Task OnSubmit()
    {
        try
        {
            if (await DoUserAllowMod(_model))
            {
                await _notificationService.Success($"Assigned '{_model.ModUrl}' to user '{_model.UserUrl}'!", "Success!");
                if (_dataGridRef is not null)
                    await _dataGridRef.Reload();
            }
            else
            {
                await _notificationService.Error($"Failed to assign '{_model.ModUrl}' to user '{_model.UserUrl}'!", "Error!");
            }
        }
        catch
        {
            await _notificationService.Error($"Failed to assign '{_model.ModUrl}' to user '{_model.UserUrl}'!", "Error!");
        }
    }

    private async Task<DataGridPaging<UserManuallyLinkedNexusModsModModel>.ItemsResponse?> GetAllowUserMods(int page, int pageSize, ICollection<Filtering> filters, ICollection<Sorting> sortings, CancellationToken ct)
    {
        var response = await _userClient.GetNexusModsModManualLinkPaginatedAsync(new(page: page, pageSize: pageSize, filters: filters, sortings: sortings), cancellationToken: ct);
        return response is { Value: { } data } ? new(data.Metadata, data.Items, data.AdditionalMetadata) : null;
    }

    private async Task OnDisallow(ButtonRowContext<UserManuallyLinkedNexusModsModModel> context)
    {
        if (context.DeleteCommand.Item is not null && await DoUserDisallowMod(context.DeleteCommand.Item))
        {
            //await context.DeleteCommand.Clicked.InvokeAsync();
        }
    }
    
    private async Task<bool> DoUserAllowMod(AllowUserModel model)
    {
        var hasUsername = NexusModsUtils.TryParseUsername(model.UserUrl, out var username);
        var hasUserId = NexusModsUtils.TryParseUserId(model.UserUrl, out _, out var userId);
        if (!hasUsername && !hasUserId)
        {
            await _notificationService.Error("Failed to parse the user url!", "Error!");
            return false;
        }

        if (!NexusModsUtils.TryParseModUrl(model.ModUrl, out _, out var modId))
        {
            await _notificationService.Error("Failed to parse the mod url!", "Error!");
            return false;
        }
        
        return await _userClient.AddNexusModsModManualLinkAsync(modId: (int) modId, userId: hasUserId ? (int) userId : null, username: hasUsername ? username : null) is { Error: null };
    }
    private async Task<bool> DoUserDisallowMod(UserManuallyLinkedNexusModsModModel model)
    {
        await ShowModal();
        return true;
    }

}