@attribute [Authorize]
@page "/crash-reports-viewer"

@inject INotificationService _notificationService
@inject ICrashReportsClient _crashReportsClient
@inject IJSRuntime _jsRuntime;

<Modal @ref="_modalRef">
    <ModalContent Size="@ModalSize.ExtraLarge" Centered>
        <ModalHeader>
            <ModalTitle>Crash Report Entry</ModalTitle>
            <CloseButton />
        </ModalHeader>
        <ModalBody>
            @if (_datagridPagingRef?.Value is not null)
            {
                <Form>
                    <Field>
                        <Text Style="white-space:break-spaces; word-break:break-all;" >
                            <Small>
                                @(_datagridPagingRef.Value.Exception
                                .Replace("\n\n", "\n")
                                .Replace("\r\r", "\r")
                                .Replace("\r\n\r\n", "\r\n")
                                .Trim()
                                .Trim('\r', '\n', '\r'))
                            </Small>
                        </Text>
                    </Field>
                    <Field>
                        <FieldLabel>Status</FieldLabel>
                        <FieldBody>
                           <Select TValue="CrashReportStatus" @bind-SelectedValue="@_datagridPagingRef.Value.Status">
                                @foreach (var crs in Enum.GetValues<CrashReportStatus>())
                                {
                                    <SelectItem Value="@crs">@crs.GetDisplayName()</SelectItem>
                                }
                            </Select>
                        </FieldBody>
                    </Field>
                    <Field>
                        <FieldLabel>Comment</FieldLabel>
                        <FieldBody Width="@Width.Is25">
                            <MemoEdit @bind-Text="@_datagridPagingRef.Value.Comment" />
                        </FieldBody>
                    </Field>
                </Form> 
            }
        </ModalBody>
        <ModalFooter>
            <Button Color="@Color.Secondary" Clicked="@(async () => await HideModal(false))">Cancel</Button>
            <Button Color="@Color.Primary" Clicked="@(async () => await HideModal(true))">Done</Button>
        </ModalFooter>
    </ModalContent>
</Modal>

<Card Margin="@Margin.Is4" Overflow="@Overflow.Auto">
    <CardHeader>
        <CardTitle Size="4" Margin="@Margin.Is0">Crash Reports</CardTitle>
    </CardHeader>
    <CardBody>
        <DataGridStreamingPaging @ref="@_datagridPagingRef" TItem="CrashReportModel" GetFilters="@GetFilters" GetItems="@GetCrashReports" Sortable Filterable DefaultPageSize="@UserSettings.DefaultCrashReportPageSize" PageSizes="@UserSettings.AvailableCrashReportPageSizes" GetPageSize="@(x => x.CrashReportPageSize)">
            <DataGridColumns>
                <DataGridColumnText TItem="CrashReportModel" Field="@nameof(CrashReportModel.GameVersion)" Caption="Game Version" Filterable Placeholder="v1.0.0" Sortable SortField="@nameof(EntityFields.GameVersion)"/>
                <DataGridColumnTextAutocomplete TItem="CrashReportModel" Field="@nameof(CrashReportModel.InvolvedModules)" Caption="Top Involved Module" Filterable Sortable SortField="@nameof(EntityFields.InvolvedModIds)" GetAutocompleteValues="@GetAutocompleteValues">
                    <DisplayTemplate>@(context.InvolvedModules.FirstOrDefault())</DisplayTemplate>
                </DataGridColumnTextAutocomplete>
                <DataGridColumnText TItem="CrashReportModel" Field="@nameof(CrashReportModel.Type)" Caption="Exception" Filterable Placeholder="System.NullReferenceException" Sortable SortField="@nameof(EntityFields.Exception)"/>
                <DataGridColumnText TItem="CrashReportModel" Field="@nameof(CrashReportModel.Version)" Caption="Version" Filterable Placeholder="1" Sortable SortField="@nameof(EntityFields.Version)"/>
                <DataGridColumnDate TItem="CrashReportModel" Field="@nameof(CrashReportModel.Date)" Caption="Date (UTC)" Filterable Sortable SortField="@nameof(EntityFields.CreatedAt)">
                    <DisplayTemplate>@(context.Date.ToString("yyyy-MM-dd HH:mm:ss"))</DisplayTemplate>
                </DataGridColumnDate>
                <DataGridColumnEnum TItem="CrashReportModel" Field="@nameof(CrashReportModel.Status)" Caption="Status" Filterable Sortable SortField="@nameof(EntityFields.Status)" >
                    <DisplayTemplate>@(context.Status.GetDisplayName())</DisplayTemplate>
                </DataGridColumnEnum>
                <DataGridColumnText TItem="CrashReportModel" Field="@nameof(CrashReportModel.Comment)" Caption="Comment" Filterable Sortable SortField="@nameof(EntityFields.Comment)"/>
            </DataGridColumns>

            <ButtonRowTemplate>
                <Button Color="@Color.Primary" Disabled="@(_datagridPagingRef?.Value is null)" Clicked="@ShowModal">Check</Button>
                <Button Color="@Color.Primary" Disabled="@(_datagridPagingRef?.Value is null)" Clicked="@OnClick">Open HTML</Button>
            </ButtonRowTemplate>
        </DataGridStreamingPaging>
    </CardBody>
</Card>

@code {

    private enum EntityFields { GameVersion, Version, InvolvedModIds, Exception, CreatedAt, Status, Comment }

    private Modal _modalRef = default!;
    private DataGridStreamingPaging<CrashReportModel>? _datagridPagingRef;

    private async Task ShowModal() => await _modalRef.Show();

    private async Task HideModal(bool save)
    {
        await _modalRef.Hide();
        if (save && _datagridPagingRef?.Value is not null)
        {
            var updatedCrashReport = _datagridPagingRef.Value with { };
            if (await _crashReportsClient.UpdateAsync(updatedCrashReport) is { HumanReadableError: var error } && string.IsNullOrEmpty(error))
            {
                await _notificationService.Success($"Saved Crash Report!", "Success!");
            }
            else
            {
                await _notificationService.Error($"Failed to save Crash Report!", "Error!");
            }
        }
    }

    private async Task OnClick()
    {
        if (_datagridPagingRef?.Value is { } report)
            await _jsRuntime.InvokeVoidAsync("open", report.Url, "_blank");
    }

    private async Task<PagingStreamingData<CrashReportModel>?> GetCrashReports(int page, int pageSize, ICollection<Filtering> filterings, ICollection<Sorting> sortings, CancellationToken ct = default) =>
        await _crashReportsClient.PaginatedStreamingAsync(new(page, pageSize, filterings, sortings), ct);

    private async Task<ICollection<string>> GetAutocompleteValues(string filter) => await _crashReportsClient.AutocompleteAsync(filter) is { Data: { } data } ? data : Array.Empty<string>();

    private static IEnumerable<Filtering> GetFilters(IEnumerable<DataGridColumnInfo> columnInfos)
    {
        foreach (var columnInfo in columnInfos)
        {
            if (columnInfo is { SortField: nameof(EntityFields.CreatedAt),SearchValue: string[] dates })
            {
                yield return new Filtering(columnInfo.SortField, FilteringType.GreaterThanOrEqual, dates[0]);
                yield return new Filtering(columnInfo.SortField, FilteringType.LessThanOrEqual, dates[1]);
            }
            else if (columnInfo.SearchValue is string str)
            {
                if (columnInfo.SortField is nameof(EntityFields.Status) && !string.IsNullOrEmpty(str))
                {
                    yield return new Filtering(columnInfo.SortField, FilteringType.Equal, str);
                }
                else if (columnInfo.SortField is nameof(EntityFields.Version) && !string.IsNullOrEmpty(str))
                {
                    if (str.StartsWith(">="))
                        yield return new Filtering(columnInfo.SortField, FilteringType.GreaterThanOrEqual, str.Substring(2));
                    else if (str.StartsWith(">"))
                        yield return new Filtering(columnInfo.SortField, FilteringType.GreaterThan, str.Substring(1));
                    else if (str.StartsWith("<="))
                        yield return new Filtering(columnInfo.SortField, FilteringType.LessThanOrEqual, str.Substring(2));
                    else if (str.StartsWith("<"))
                        yield return new Filtering(columnInfo.SortField, FilteringType.LessThan, str.Substring(1));
                    else
                        yield return new Filtering(columnInfo.SortField, FilteringType.Equal, str);
                }
                else if (str.Length >= 3)
                {
                    if (columnInfo.SortField is nameof(EntityFields.InvolvedModIds) or nameof(EntityFields.Exception))
                    {
                        yield return new Filtering(columnInfo.SortField, FilteringType.Contains, str);
                    }
                    else
                    {
                        yield return new Filtering(columnInfo.SortField, FilteringType.StartsWith, str);
                    }
                }
            }
        }
    }

}