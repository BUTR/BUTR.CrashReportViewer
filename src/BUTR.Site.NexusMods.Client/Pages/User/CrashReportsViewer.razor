@attribute [Authorize]
@page "/crash-reports-viewer"

@inject INotificationService _notificationService
@inject ICrashReportProvider _crashReportProvider
@inject IJSRuntime _jsRuntime;

<Modal ShowBackdrop @ref="_modalRef">
    <ModalContent Size="ModalSize.ExtraLarge" Centered>
        <ModalHeader>
            <ModalTitle>Crash Report Entry</ModalTitle>
            <CloseButton />
        </ModalHeader>
        <ModalBody>
            @if (@_entry is not null)
            {
                <Form>
                    <Field>
                        <Text Style="white-space:break-spaces; word-break:break-all;" >
                            <Small>
                                @(_entry.Exception
                                .Replace("\n\n", "\n")
                                .Replace("\r\r", "\r")
                                .Replace("\r\n\r\n", "\r\n")
                                .Trim()
                                .Trim('\r', '\n', '\r'))
                            </Small>
                        </Text>
                    </Field>
                    <Field>
                        <FieldLabel>Status</FieldLabel>
                        <FieldBody>
                           <Select TValue="CrashReportStatus" @bind-SelectedValue="@_entry.Status">
                                @foreach (var crs in Enum.GetValues<CrashReportStatus>())
                                {
                                    <SelectItem Value="@crs">@crs.GetDisplayName()</SelectItem>
                                }
                            </Select>
                        </FieldBody>
                    </Field>
                    <Field>
                        <FieldLabel>Comment</FieldLabel>
                        <FieldBody Width="Width.Is25">
                            <MemoEdit AutoSize @bind-Text="@_entry.Comment" />
                        </FieldBody>
                    </Field>
                </Form> 
            }
        </ModalBody>
        <ModalFooter>
            <Button Color="Color.Secondary" Clicked="@(async () => await @HideModal(false))">Cancel</Button>
            <Button Color="Color.Primary" Clicked="@(async () => await @HideModal(true))">Done</Button>
        </ModalFooter>
    </ModalContent>
</Modal>

<Card Margin="Margin.Is4" Overflow="Overflow.Auto">
    <CardHeader>
        <CardTitle Size="4" Margin="Margin.Is0">Crash Reports</CardTitle>
    </CardHeader>
    <CardBody>
        <DataGrid @ref="_dataGridRef"
                  TItem="CrashReportModel?"
                  Data="@_entries"
                  SelectedRowChanged="@(model => DataGridUtils.SelectDeselect(model, ref _entry, ref _dataGridRef))"
                  ReadData="@OnReadData"
                  TotalItems="@_pagingMetadata.TotalCount"
                  CurrentPage="@_pagingMetadata.CurrentPage"
                  PageSize="@_pagingMetadata.PageSize"
                  SelectionMode="DataGridSelectionMode.Single"
                  ShowPager
                  ShowPageSizes
                  PageSizes="@(new [] { 5, 10, 25, 50 })"
                  Filterable
                  CustomFilter="@OnCustomFilter"
                  Sortable 
                  Responsive>
            <DataGridColumns>
                <DataGridColumn TItem="CrashReportModel"
                                Field="@nameof(CrashReportModel.GameVersion)"
                                Caption="Game Version"
                                SortField="@nameof(EntityFields.GameVersion)">
                    <DisplayTemplate>
                        @(context.GameVersion)
                    </DisplayTemplate>
                    <FilterTemplate>
                        <TextEdit TextChanged="@(x => { context.TriggerFilterChange(x); })" Debounce="true" DebounceInterval="500" />
                    </FilterTemplate>
                </DataGridColumn>
                
                <DataGridColumn TItem="CrashReportModel"
                                Field="@nameof(CrashReportModel.InvolvedModules)"
                                Caption="Top Involved Module"
                                SortField="@nameof(EntityFields.InvolvedModIds)">
                    <DisplayTemplate>
                        @(context.InvolvedModules.FirstOrDefault())
                    </DisplayTemplate>
                    <FilterTemplate>
                        <Autocomplete TItem="string"
                                      TValue="string"
                                      Data="@_autocomplete"
                                      TextField="@(x => x)"
                                      ValueField="@(x => x)"
                                      SelectedText="@_selectedAutoCompleteText"
                                      SelectedValue="@_selectedSearchValue"
                                      Debounce="true" DebounceInterval="500"
                                      SelectedValueChanged="@(x => { _selectedSearchValue = x; _selectedAutoCompleteText = x; context.TriggerFilterChange(x); })"
                                      SearchChanged="@SearchFilterChangedAsync">
                        </Autocomplete>
                    </FilterTemplate>
                </DataGridColumn>
                
                <DataGridColumn TItem="CrashReportModel"
                                Field="@nameof(CrashReportModel.Type)"
                                Caption="Exception"
                                Filterable="false"
                                Sortable="false">
                    <DisplayTemplate>
                        @(context.Type)
                    </DisplayTemplate>
                    <FilterTemplate>
                        <TextEdit TextChanged="@(x => { context.TriggerFilterChange(x); })" Debounce="true" DebounceInterval="500" />
                    </FilterTemplate>
                </DataGridColumn>
                
                <DataGridColumn TItem="CrashReportModel"
                                Field="@nameof(CrashReportModel.Date)"
                                Caption="Date (UTC)"
                                SortField="@nameof(EntityFields.CreatedAt)" >
                    <DisplayTemplate>
                        @(context.Date.ToString("yyyy-MM-dd HH:mm:ss"))
                    </DisplayTemplate>
                    <FilterTemplate>
                        <DatePicker TValue="DateTime?"
                                    Placeholder="yyyy-MM-dd"
                                    InputMode="DateInputMode.Date"
                                    SelectionMode="DateInputSelectionMode.Range"
                                    DatesChanged="@(range => OnDatesChanged(range, context))"/>
                    </FilterTemplate>
                </DataGridColumn>
                
                <DataGridColumn TItem="CrashReportModel"
                                Field="@nameof(CrashReportModel.Status)"
                                Caption="Status"
                                SortField="@nameof(EntityFields.Status)" >
                    <DisplayTemplate>
                        @(context.Status.GetDisplayName())
                    </DisplayTemplate>
                    <FilterTemplate>
                        <Select TValue="string" SelectedValueChanged="@(value => { OnStatusChanged(value, context); })">
                            <SelectItem Value="@string.Empty">Any</SelectItem>
                            @foreach (var crs in Enum.GetValues<CrashReportStatus>())
                            {
                                <SelectItem Value="@crs">@crs.GetDisplayName()</SelectItem>
                            }
                        </Select>
                    </FilterTemplate>
                </DataGridColumn>
                
                <DataGridColumn TItem="CrashReportModel"
                                Field="@nameof(CrashReportModel.Comment)"
                                Caption="Comment"
                                SortField="@nameof(EntityFields.Comment)">
                    <DisplayTemplate>
                        @(context.Comment)
                    </DisplayTemplate>
                    <FilterTemplate>
                        <TextEdit TextChanged="@(x => { context.TriggerFilterChange(x); })" Debounce="true" DebounceInterval="500" />
                    </FilterTemplate>
                </DataGridColumn>
            </DataGridColumns>
            
            <EmptyTemplate>
                No result!
            </EmptyTemplate>
            
            <LoadingTemplate>
                <Progress @ref="_progressRef" Color="Color.Primary" Value="@_progress" Max="100" />
            </LoadingTemplate>
            
            <ButtonRowTemplate>
                <Button Color="Color.Primary" Disabled="@(_entry is null)" Clicked="@ShowModal">
                    Check
                </Button>
                <Button Color="Color.Primary" Disabled="@(_entry is null)" Clicked="@(() => OnClick(_entry!))">
                    Open HTML
                </Button>
            </ButtonRowTemplate>
        </DataGrid>
    </CardBody>
</Card>

@code {

    private enum EntityFields { GameVersion, InvolvedModIds, CreatedAt, Status, Comment }
    
    private CrashReportModel? _entry;
    private ICollection<CrashReportModel> _entries = new List<CrashReportModel>();
    private PagingMetadata _pagingMetadata = new(0, 0, 0, 0) { CurrentPage = 1, PageSize = 10 };
    private int _progress;
    private ICollection<string> _autocomplete;
    private string _selectedSearchValue;
    private string _selectedAutoCompleteText;

    private Modal _modalRef = default!;
    private DataGrid<CrashReportModel?> _dataGridRef = default!;
    private Progress _progressRef = default!;

    private async Task ShowModal() => await _modalRef.Show();

    private async Task HideModal(bool save)
    {
        await _modalRef.Hide();
        if (save && _entry is not null)
        {
            var updatedCrashReport = _entry with { };
            if (await _crashReportProvider.UpdateCrashReport(updatedCrashReport))
            {
                await _notificationService.Success($"Saved Crash Report!", "Success!");
            }
            else
            {
                await _notificationService.Error($"Failed to save Crash Report!", "Error!");
            }
        }
    }

    private async Task OnClick(CrashReportModel report)
    {
        await _jsRuntime.InvokeVoidAsync("open", report.Url, "_blank");
    }

    private async Task GetCrashReports(ICollection<Filtering> filterings, ICollection<Sorting> sortings, CancellationToken ct = default)
    {
        await using var progress = ProgressUtils.DoProgress(x => _progress = x, () => _progress, () => InvokeAsync(StateHasChanged));
        var response = await _crashReportProvider.GetCrashReports(_pagingMetadata.CurrentPage, _pagingMetadata.PageSize, filterings, sortings, ct);
        if (response is not null)
        {
            _entries = response.Items;
            _pagingMetadata = response.Metadata;
        }
    }

    private async Task OnReadData(DataGridReadDataEventArgs<CrashReportModel?> e)
    {
        if (!e.CancellationToken.IsCancellationRequested)
        {
            var sortings = e.Columns
                .Where(x => x.SortIndex != -1)
                .OrderBy(x => x.SortIndex)
                .Select(x => new Sorting(x.SortField, x.SortDirection.ToSortingType()))
                .ToArray();
            var filterings = GetFilters(e.Columns).ToArray();
            _pagingMetadata = _pagingMetadata with { CurrentPage = e.Page, PageSize = e.PageSize };
            await GetCrashReports(filterings, sortings, e.CancellationToken);
        }
    }

    private IEnumerable<Filtering> GetFilters(IEnumerable<DataGridColumnInfo> columnInfos)
    {
        foreach (var columnInfo in columnInfos)
        {
            if (columnInfo.SortField == "CreatedAt" && columnInfo.SearchValue is string[] dates)
            {
                yield return new Filtering(columnInfo.SortField, FilteringType.GreaterThanOrEqual, dates[0]);
                yield return new Filtering(columnInfo.SortField, FilteringType.LessThanOrEqual, dates[1]);
            }
            else if (columnInfo.SearchValue is string str)
            {
                if (columnInfo.SortField == "Status")
                {
                    yield return new Filtering(columnInfo.SortField, FilteringType.Equal, str);
                }
                else if (str.Length >= 3)
                {
                    if (columnInfo.SortField == "InvolvedModIds")
                    {
                        yield return new Filtering(columnInfo.SortField, FilteringType.Contains, str);
                    }
                    else
                    {
                        yield return new Filtering(columnInfo.SortField, FilteringType.StartsWith, str);
                    }
                }
            }
        }
    }
    
    private async Task SearchFilterChangedAsync(string? filter)
    {
        _selectedAutoCompleteText = filter ?? string.Empty;
        if (filter is not null && filter.Length >= 3)
            _autocomplete = await _crashReportProvider.AutocompleteModId(filter);
    }

    private static void OnDatesChanged(IReadOnlyList<DateTime?>? range, FilterContext<CrashReportModel> context)
    {
        if (range is null)
        {
            context.TriggerFilterChange(string.Empty);
            return;
        }
        
        var dates = range.Where(x => x is not null).Select(x => x.GetValueOrDefault()).ToArray();

        if (dates.Length == 1)
        {
            var min = dates[0].Date;
            var max = dates[0].Date.AddDays(1).AddTicks(-1);
            context.TriggerFilterChange(new[] {min, max}.Select(x => x.ToString("O")).ToArray());
        }
        else
        {
            context.TriggerFilterChange(dates.Select(x => x.ToString("O")).ToArray());
        }
    }
    
    private static void OnStatusChanged(string status, FilterContext<CrashReportModel> context)
    {
        context.TriggerFilterChange(status);  
    }
    
    private static bool OnCustomFilter(CrashReportModel model) => true;
}
