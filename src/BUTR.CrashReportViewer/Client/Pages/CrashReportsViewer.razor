@page "/crash-reports-viewer"
@attribute [Authorize]
@inject NavigationManager _navigationManager
@inject ILocalStorageService _localStorage
@inject BackendAPIClient _backendApiClient

<div class="card">
    <h4 class="card-header">Crash Reports</h4>
    <div class="card-body">
        @if (_reports == null)
        {
            <span class="spinner-border"></span>
        }
        else
        {
            <table class="table table-responsive-md table-sm align-middle" style="text-align: center;">
                <thead>
                    <tr>
                        <th scope="col">Type</th>
                        <th scope="col">Date</th>
                        <th scope="col">Status</th>
                        <th scope="col">Comment</th>
                        <th scope="col"></th>
                    </tr>
                </thead>
                <tbody>
                @foreach (var report in _reports)
                {
                    <tr>
                        <td style="text-align: left;" data-bs-toggle="collapse" data-bs-target="#guid_@report.Id" aria-expanded="false" aria-controls="guid_@report.Id">
                            <p style="white-space: pre-line">@report.Exception.Split(Environment.NewLine).FirstOrDefault()?.Split("Type:").Skip(1).FirstOrDefault()</p>
                        </td>
                        <td>
                            @report.Date.ToString("yy-MM-dd HH:mm:ss")
                        </td>
                        <td>
                            <EditForm Model="@report">
                                <InputSelect @bind-Value="report.Status" class="@ButtonColorType(report.Status)">
                                    @foreach (var e in Enum.GetValues<CrashReportStatus>())
                                    {
                                        <option value="@e" class="@ButtonColorType(e)">@e</option>
                                    }
                                </InputSelect>
                            </EditForm>
                        </td>
                        <td>
                            <EditForm Model="@report">
                                <InputText id="name" @bind-Value="report.Comment" @onfocusout="() => OnFocusOut(report)" />
                            </EditForm>
                        </td>
                        <td>
                            <button type="button" class="btn btn-outline-secondary">
                                Open Report
                            </button>
                        </td>
                    </tr>
                    <tr class="collapse" id="guid_@report.Id">
                        <td colspan="5" style="text-align: left;">
                            <div>
                                <p style="white-space: pre-line">@report.Exception.Split(Environment.NewLine).FirstOrDefault()?.Split("Type:").Skip(1).FirstOrDefault()</p>
                            </div>
                        </td>
                    </tr>
                }
                </tbody>
            </table>
        }
    </div>
</div>

@code {
    private CrashReportModel[]? _reports;
    private string _token = default!;

    protected override async Task OnInitializedAsync()
    {
        _token = await _localStorage.GetItemAsStringAsync("token");
        _reports = await _backendApiClient.GetCrashReports(_token);
    }


    private void OnFocusOut(CrashReportModel report)
    {

    }

    private void OnSelected()
    {

    }

    private string IsSelected(CrashReportStatus crs1, CrashReportStatus crs2)
        => crs1 == crs2 ? "selected" : string.Empty;

    private string ButtonColorType(CrashReportStatus crashReportStatus) => crashReportStatus switch
    {
        CrashReportStatus.New => "text-secondary",
        CrashReportStatus.BeingLookedAt => "text-info",
        CrashReportStatus.NotMyFault => "text-success",
        CrashReportStatus.Known => "text-secondary",
        CrashReportStatus.Duplicate => "text-info",
        CrashReportStatus.NeedsMoreInfo => "text-info",
        CrashReportStatus.Fixed => "text-success",
        _ => "text-secondary"
    };

}
