@page "/crash-reports-viewer"
@attribute [Authorize]
@inject NavigationManager _navigationManager
@inject ILocalStorageService _localStorage
@inject BackendAPIClient _backendApiClient
@inject IJSRuntime _jsRuntime;

<div class="card">
    <h4 class="card-header">Crash Reports</h4>
    <div class="card-body">
        @if (_reports == null)
        {
            <span class="spinner-border"></span>
        }
        else
        {
            <div class="table-responsive-md">
                <table class="table table-sm align-middle" style="text-align: center;">
                    <thead>
                        <tr>
                            <th scope="col">Type</th>
                            <th scope="col">Date</th>
                            <th scope="col">Status</th>
                            <th scope="col">Comment</th>
                            <th scope="col"></th>
                        </tr>
                    </thead>
                    <tbody>
                        @foreach (var report in _reports)
                        {
                            <tr>
                                <td style="text-align: left;" data-bs-toggle="collapse" data-bs-target="#guid_@report.Id" aria-expanded="false" aria-controls="guid_@report.Id">
                                    <p style="white-space: pre-line">@report.Exception.Split(Environment.NewLine).FirstOrDefault()?.Split("Type:").Skip(1).FirstOrDefault()</p>
                                </td>
                                <td>
                                    @report.Date.ToString("yy-MM-dd HH:mm:ss")
                                </td>
                                <td>
                                    <EditForm Model="@report">
                                        <InputSelect class="@ButtonColorType(report.Status)"
                                                     ValueExpression="@(() => report.Status)"
                                                     Value="@report.Status"
                                                     ValueChanged="@((CrashReportStatus value) => OnStatusChange(report, value))">
                                            @foreach (var e in Enum.GetValues<CrashReportStatus>())
                                            {
                                                <option value="@e" class="@ButtonColorType(e)">@e</option>
                                            }
                                        </InputSelect>
                                    </EditForm>
                                </td>
                                <td>
                                    <EditForm Model="@report">
                                        <InputText id="name"
                                                   ValueExpression="@(() => report.Comment)"
                                                   Value="@report.Comment"
                                                   ValueChanged="@((value) => OnCommentChange(report, value))" />
                                    </EditForm>
                                </td>
                                <td>
                                    <button type="button" class="btn btn-outline-secondary" @onclick="@(() => OnClick(report))">
                                        Open Report
                                    </button>
                                </td>
                            </tr>
                            <tr class="collapse" id="guid_@report.Id">
                                <td colspan="5" style="text-align: left;">
                                    <div class="mx-3">
                                        <p class="font-monospace fs-6" style="white-space: pre-line">@report.Exception</p>
                                    </div>
                                </td>
                            </tr>
                        }
                    </tbody>
                </table>
            </div>
            <div class="row">
                <div class="col">
                    <Pagination Metadata="_pagingMetadata" Spread="5" SelectedPage="SelectedPage" />
                </div>
            </div>
        }
    </div>
</div>

@code {
    private string _token = default!;

    private List<CrashReportModel> _reports = new();
    private int _pageNumber = 1;
    private PagingMetadata _pagingMetadata = new();

    protected override async Task OnInitializedAsync()
    {
        _token = await _localStorage.GetItemAsStringAsync("token");
        await GetCrashReports();
    }

    private async void OnStatusChange(CrashReportModel report, CrashReportStatus value)
    {
        var updatedCrashReport = report with { Status = value };
        if (await _backendApiClient.UpdateCrashReport(_token, updatedCrashReport))
        {
            report.Status = value;
            StateHasChanged();
        }
    }

    private async void OnCommentChange(CrashReportModel report, string? value)
    {
        var updatedCrashReport = report with { Comment = value ?? string.Empty };
        if (await _backendApiClient.UpdateCrashReport(_token, updatedCrashReport))
        {
            report.Comment = value ?? string.Empty;
            StateHasChanged();
        }
    }
    private async void OnClick(CrashReportModel report)
    {
        await _jsRuntime.InvokeVoidAsync("open", report.Url, "_blank");
    }

    private async Task SelectedPage(int page)
    {
        _pageNumber = page;
        await GetCrashReports();
    }

    private async Task GetCrashReports()
    {
        var response = await _backendApiClient.GetCrashReports(_token, _pageNumber);
        if (response is not null)
        {
            _reports = response.Items;
            _pagingMetadata = response.Metadata;
        }
    }

    private static string ButtonColorType(CrashReportStatus crashReportStatus) => crashReportStatus switch
    {
        CrashReportStatus.New => "text-secondary",
        CrashReportStatus.BeingLookedAt => "text-info",
        CrashReportStatus.NotMyFault => "text-success",
        CrashReportStatus.Known => "text-secondary",
        CrashReportStatus.Duplicate => "text-info",
        CrashReportStatus.NeedsMoreInfo => "text-info",
        CrashReportStatus.Fixed => "text-success",
        _ => "text-secondary"
    };
}
