@page "/CrashReportsViewer"
@inject NavigationManager _navigationManager
@inject ILocalStorageService _localStorage
@inject IHttpClientFactory _clientFactory
@inject NexusModsAPIClient _nexusModsAPIKeyValidator

<div class="card">
    <h4 class="card-header">Crash Reports</h4>
    <div class="card-body">
        @if (_reports == null)
        {
            <p><em>Loading...</em></p>
        }
        else
        {
            <table class="table">
                <thead>
                <tr>
                    <th>Id</th>
                    <th>Date</th>
                    <th>Status</th>
                    <th>Comment</th>
                    <th></th>
                </tr>
                </thead>
                <tbody>
                @foreach (var report in _reports)
                {
                    <tr>
                        <td>@report.Id</td>
                        <td>@report.Date.ToString("yy-MM-dd HH:mm:ss")</td>
                        <td>@report.Status</td>
                        <td>
                            <EditForm Model="@report">
                                <InputText id="name" @bind-Value="report.Comment" @onfocusout="() => OnFocusOut(report)"/>
                            </EditForm>
                        </td>
                        <td>
                            <button @onclick="OnSelected">
                                Open
                            </button>
                        </td>
                    </tr>
                }
                </tbody>
            </table>
        }
    </div>
</div>

@code {
    private CrashReportModel[]? _reports;
    private NexusModsValidateResponse _user = default!;

    protected override async Task OnInitializedAsync()
    {
        if (!await _localStorage.ContainKeyAsync("user"))
        {
            _navigationManager.NavigateTo("Login", true);
        }

        _user = await _localStorage.GetItemAsync<NexusModsValidateResponse>("user");
        var validationResult = await _nexusModsAPIKeyValidator.ValidateAPIKey(_user.Key);
        if (validationResult is null)
        {
            _navigationManager.NavigateTo("Login", true);
        }

        _reports = await GetCrashReports();
    }


    private async Task<CrashReportModel[]?> GetCrashReports()
    {
        try
        {
            var request = new HttpRequestMessage(HttpMethod.Get, "CrashReports");
            request.Headers.Add("apikey", _user.Key);
            request.Headers.Accept.Add(new System.Net.Http.Headers.MediaTypeWithQualityHeaderValue("application/json"));
            var httpClient = _clientFactory.CreateClient("Backend");
            var response = await httpClient.SendAsync(request);
            if (!response.IsSuccessStatusCode)
            {
                return null;
            }
            else
            {
                return await response.Content.ReadFromJsonAsync<CrashReportModel[]>();
            }
        }
        catch (Exception)
        {
            return null;
        }
    }

    private void OnFocusOut(CrashReportModel report)
    {

    }

    private void OnSelected()
    {

    }
}